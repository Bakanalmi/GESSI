@article{CADAVID2020106202,
title = {Architecting systems of systems: A tertiary study},
journal = {Information and Software Technology},
volume = {118},
pages = {106202},
year = {2020},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2019.106202},
url = {https://www.sciencedirect.com/science/article/pii/S0950584919302083},
author = {Héctor Cadavid and Vasilios Andrikopoulos and Paris Avgeriou},
keywords = {Systems of Systems, SoS Architecting, Tertiary study, Systematic literature review},
abstract = {Context: The term System of Systems (SoS) has increasingly been used in a wide variety of domains to describe those systems composed 
of independent constituent systems that collaborate towards a mission that they could not accomplish on their own. There is a significant volume of research by the software architecture community that aims to overcome the challenges involved in architecting SoS, as evidenced by the number of 
secondary studies in the field published so far. However, the boundaries of such research do not seem to be well defined, at least partially, due to the emergence of SoS-adjacent areas of interest like the Internet of Things.Objective: This paper aims to investigate the current state of research on SoS architecting by synthesizing the demographic data, assessing the quality and the coverage of architecting activities and software quality attributes by the research, and distilling a concept map that reflects a community-wide understanding of the concept of SoS. Method: We conduct what is, to the best of our understanding, the first tertiary study on SoS architecting. Such tertiary study was based on five research questions, and was performed by following the guidelines of Kitchenham et al. In all, 19 secondary studies were evaluated, which is comparable to other tertiary studies. Results: The study illustrates a state of disconnection in the research community, with research gaps in the coverage of particular phases and quality attributes. Furthermore, a more effective approach in classifying systems as SoS is required, as the means of resolving conceptual and terminological overlaps with the related domains. Conclusions: Despite the amount of research in the area of SoS architecting, more coordinated and systematic targeted efforts are required in order to address the identified issues with the current state of research.}
}
@article{CRUZES2011440,
title = {Research synthesis in software engineering: A tertiary study},
journal = {Information and Software Technology},
volume = {53},
number = {5},
pages = {440-455},
year = {2011},
note = {Special Section on Best Papers from XP2010},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2011.01.004},
url = {https://www.sciencedirect.com/science/article/pii/S095058491100005X},
author = {Daniela S. Cruzes and Tore Dybå},
keywords = {Evidence-based software engineering, Empirical software engineering, Systematic review, Qualitative methods, Mixed-methods},
abstract = {Context
Comparing and contrasting evidence from multiple studies is necessary to build knowledge and reach conclusions about the empirical support for a phenomenon. Therefore, research synthesis is at the center of the scientific enterprise in the software engineering discipline.
Objective
The objective of this article is to contribute to a better understanding of the challenges in synthesizing software engineering research and their 
implications for the progress of research and practice.
Method
A tertiary study of journal articles and full proceedings papers from the 
inception of evidence-based software engineering was performed to assess the types and methods of research synthesis in systematic reviews in software engineering.
Results
As many as half of the 49 reviews included in the study did not contain any synthesis. Of the studies that did contain synthesis, two thirds performed a narrative or a thematic synthesis. Only a few studies adequately demonstrated a robust, academic approach to research synthesis.
Conclusion
We concluded that, despite the focus on systematic reviews, there is limited attention paid to research synthesis in software engineering. This trend needs to change and a repertoire of synthesis methods needs to be an integral part of systematic reviews to increase their significance and utility for research and practice.}
}
@article{HODA201760,
title = {Systematic literature reviews in agile software development: A 
tertiary study},
journal = {Information and Software Technology},
volume = {85},
pages = {60-70},
year = {2017},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2017.01.007},
url = {https://www.sciencedirect.com/science/article/pii/S0950584917300538},
author = {Rashina Hoda and Norsaremah Salleh and John Grundy and Hui Mien Tee},
keywords = {Agile software development, Tertiary study, Systematic literature reviews, Mapping study},
abstract = {Context
A number of systematic literature reviews and mapping studies (SLRs) covering numerous primary research studies on various aspects of agile software development (ASD) exist.
Objective
The aim of this paper is to provide an overview of the SLRs on ASD research topics for software engineering researchers and practitioners.
Method
We followed the tertiary study guidelines by Kitchenham et al. to find SLRs published between late 1990s to December 2015.
Results
We found 28 SLRs focusing on ten different ASD research areas: adoption, methods, practices, human and social aspects, CMMI, usability, global software engineering (GSE), organizational agility, embedded systems, and software product line engineering. The number of SLRs on ASD topics, similar to those on software engineering (SE) topics in general, is on the rise. A majority of the SLRs applied standardized guidelines and the quality of these SLRs on ASD topics was found to be slightly higher for journal 
publications than for conferences. While some individuals and institutions seem to lead this area, the spread of authors and institutions is wide. 
With respect to prior review recommendations, significant progress was noticed in the area of connecting agile to established domains such as usability, CMMI, and GSE; and considerable progress was observed in focusing on management-oriented approaches as Scrum and sustaining ASD in different contexts such as embedded systems.
Conclusion
SLRs of ASD studies are on the rise and cover a variety of ASD aspects, ranging from early adoption issues to newer applications of ASD such as in 
product line engineering. ASD research can benefit from further primary and secondary studies on evaluating benefits and challenges of ASD methods, agile hybrids in large-scale setups, sustainability, motivation, teamwork, and project management; as well as a fresh review of empirical studies in ASD to cover the period post 2008.}
}
@article{DASILVA2011899,
title = {Six years of systematic literature reviews in software engineering: An updated tertiary study},
journal = {Information and Software Technology},
volume = {53},
number = {9},
pages = {899-913},
year = {2011},
note = {Studying work practices in Global Software Engineering},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2011.04.004},
url = {https://www.sciencedirect.com/science/article/pii/S0950584911001017},
author = {Fabio Q.B. {da Silva} and André L.M. Santos and Sérgio Soares and A. César C. França and Cleviton V.F. Monteiro and Felipe Farias Maciel},
keywords = {Systematic reviews, Mapping studies, Software engineering, Tertiary studies},
abstract = {Context
Since the introduction of evidence-based software engineering in 2004, systematic literature review (SLR) has been increasingly used as a method for conducting secondary studies in software engineering. Two tertiary studies, published in 2009 and 2010, identified and analysed 54 SLRs published in journals and conferences in the period between 1st January 2004 and 
30th June 2008.
Objective
In this article, our goal was to extend and update the two previous tertiary studies to cover the period between 1st July 2008 and 31st December 2009. We analysed the quality, coverage of software engineering topics, and potential impact of published SLRs for education and practice.
Method
We performed automatic and manual searches for SLRs published in journals 
and conference proceedings, analysed the relevant studies, and compared and integrated our findings with the two previous tertiary studies.
Results
We found 67 new SLRs addressing 24 software engineering topics. Among these studies, 15 were considered relevant to the undergraduate educational curriculum, and 40 appeared of possible interest to practitioners. We found that the number of SLRs in software engineering is increasing, the overall quality of the studies is improving, and the number of researchers and research organisations worldwide that are conducting SLRs is also increasing and spreading.
Conclusion
Our findings suggest that the software engineering research community is starting to adopt SLRs consistently as a research method. However, the majority of the SLRs did not evaluate the quality of primary studies and fail to provide guidelines for practitioners, thus decreasing their potential impact on software engineering practice.}
}
@article{NURDIANI2016162,
title = {The impacts of agile and lean practices on project constraints: A tertiary study},
journal = {Journal of Systems and Software},
volume = {119},
pages = {162-183},
year = {2016},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2016.06.043},
url = {https://www.sciencedirect.com/science/article/pii/S0164121216300863},
author = {Indira Nurdiani and Jürgen Börstler and Samuel A. Fricker},
keywords = {Tertiary study, Agile software development, Lean software development, Project constraints},
abstract = {The growing interest in Agile and Lean software development 
is reflected in the increasing number of secondary studies on the benefits and limitations of Agile and Lean processes and practices. The aim of this tertiary study is to consolidate empirical evidence regarding Agile and Lean practices and their respective impacts on project constraints as defined in the Project Management Body of Knowledge (PMBOK): scope, quality, schedule, budget, resources, communication, and risk. In this tertiary study, 13 secondary studies were included for detailed analysis. Given the heterogeneity of the data, we were unable to perform a rigorous synthesis. Instead, we mapped the identified Agile and Lean practices, and their impacts on the project constraints described in PMBOK. From 13 secondary studies, we identified 13 Agile and Lean practices. Test-Driven Development (TDD) is studied in ten secondary studies, meanwhile other practices are studied in only one or two secondary studies. This tertiary study provides a consolidated view of the impacts of Agile and Lean practices. The result of this tertiary study indicates that TDD has a positive impact 
on external quality. However, due to insufficient data or contradictory results, we were unable to make inferences on other Agile and Lean practices. Implications for research and practice are further discussed in the paper.}
}
@article{ABEDINNIA2017279,
title = {Machine scheduling in production: A content analysis},
journal = {Applied Mathematical Modelling},
volume = {50},
pages = {279-299},
year = {2017},
issn = {0307-904X},
doi = {https://doi.org/10.1016/j.apm.2017.05.016},
url = {https://www.sciencedirect.com/science/article/pii/S0307904X17303335},
author = {Hamid Abedinnia and Christoph H. Glock and Michael D. Schneider},
keywords = {Machine scheduling, Production scheduling, Content analysis, Tertiary study, Systematic literature review},
abstract = {This paper presents the results of a content analysis on a comprehensive and systematically generated sample of 132 literature surveys on machine scheduling problems in production (MSPP). The paper identifies the main attributes of MSPP by analyzing these surveys and proposes a 
classification scheme for MSPP consisting of seven main groups with several subgroups. The reliability of the results of the content analysis is examined in a sensitivity analysis. A close analysis of the results unveils several research gaps in the literature and enables us to propose promising avenues for future research.}
}
@article{KITCHENHAM20097,
title = {Systematic literature reviews in software engineering – 
A systematic literature review},
journal = {Information and Software Technology},
volume = {51},
number = {1},
pages = {7-15},
year = {2009},
note = {Special Section - Most Cited Articles in 2002 and Regular Research Papers},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2008.09.009},
url = {https://www.sciencedirect.com/science/article/pii/S0950584908001390},
author = {Barbara Kitchenham and O. {Pearl Brereton} and David Budgen and Mark Turner and John Bailey and Stephen Linkman},
keywords = {Systematic literature review, Evidence-based software engineering, Tertiary study, Systematic review quality, Cost estimation},
abstract = {Background
In 2004 the concept of evidence-based software engineering (EBSE) was introduced at the ICSE04 conference.
Aims
This study assesses the impact of systematic literature reviews (SLRs) which are the recommended EBSE method for aggregating evidence.
Method
We used the standard systematic literature review method employing a manual search of 10 journals and 4 conference proceedings.
Results
Of 20 relevant studies, eight addressed research trends rather than technique evaluation. Seven SLRs addressed cost estimation. The quality of SLRs was fair with only three scoring less than 2 out of 4.
Conclusions
Currently, the topic areas covered by SLRs are limited. European researchers, particularly those at the Simula Laboratory appear to be the leading 
exponents of systematic literature reviews. The series of cost estimation 
SLRs demonstrate the potential value of EBSE for synthesising evidence and making it available to practitioners.}
}
@article{AMPATZOGLOU2019201,
title = {Identifying, categorizing and mitigating threats to validity in software engineering secondary studies},
journal = {Information and Software Technology},
volume = {106},
pages = {201-230},
year = {2019},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2018.10.006},
url = {https://www.sciencedirect.com/science/article/pii/S0950584918302106},
author = {Apostolos Ampatzoglou and Stamatia Bibi and Paris Avgeriou and Marijn Verbeek and Alexander Chatzigeorgiou},
keywords = {Empirical software engineering, Secondary studies, Threats to Validity, Literature Review},
abstract = {Context
Secondary studies are vulnerable to threats to validity. Although, mitigating these threats is crucial for the credibility of these studies, we currently lack a systematic approach to identify, categorize and mitigate threats to validity for secondary studies.
Objective
In this paper, we review the corpus of secondary studies, with the aim to 
identify: (a) the trend of reporting threats to validity, (b) the most common threats to validity and corresponding mitigation actions, and (c) possible categories in which threats to validity can be classified.
Method
To achieve this goal we employ the tertiary study research method that is 
used for synthesizing knowledge from existing secondary studies. In particular, we collected data from more than 100 studies, published until December 2016 in top quality software engineering venues (both journals and conference).
Results
Our results suggest that in recent years, secondary studies are more likely to report their threats to validity. However, the presentation of such 
threats is rather ad hoc, e.g., the same threat may be presented with a different name, or under a different category. To alleviate this problem, we propose a classification schema for reporting threats to validity and possible mitigation actions. Both the classification of threats and the associated mitigation actions have been validated by an empirical study, i.e., Delphi rounds with experts.
Conclusion
Based on the proposed schema, we provide a checklist, which authors of secondary studies can use for identifying and categorizing threats to validity and corresponding mitigation actions, while readers of secondary studies can use the checklist for assessing the validity of the reported results.}
}
@article{RIOS2018117,
title = {A tertiary study on technical debt: Types, management strategies, research trends, and base information for practitioners},
journal = {Information and Software Technology},
volume = {102},
pages = {117-145},
year = {2018},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2018.05.010},
url = {https://www.sciencedirect.com/science/article/pii/S0950584918300946},
author = {Nicolli Rios and Manoel Gomes de {Mendonça Neto} and Rodrigo Oliveira Spínola},
keywords = {Technical debt, Technical debt types, Management strategies, Tertiary study},
abstract = {Context
The concept of technical debt (TD) contextualizes problems faced during software evolution considering the tasks that are not carried out adequately during its development. Currently, it is common to associate any impediment related to the software product and its development process to the definition of TD. This can bring confusion and ambiguity in the use of the term. Besides, due to the increasing amount of work in the area, it is difficult to have a comprehensive view of the plethora of proposals on TD 
management.
Objective
This paper intends to investigate the current state of research on TD by identifying what research topics have been considered, organizing research directions and practical knowledge that has already been defined, identifying the known types of TD, and organizing what activities, strategies and tools have been proposed to support the management of TD.
Method
A tertiary study was performed based on a set of five research questions. 
In total, 13 secondary studies, dated from 2012 to March 2018, were evaluated.
Results
The results of this tertiary study are beneficial for both practitioners and researchers. We evolved a taxonomy of TD types, identified a list of situations in which debt items can be found in software projects, and organized a map representing the state of the art of activities, strategies and tools to support TD management. Besides, we also summarized some research directions and practical knowledge, and identified the research topics that have been more considered in secondary studies.
Conclusion
This tertiary study revisited the TD landscape. Its results can help to identify points that still require further investigation in TD research.}
}
@article{YANG2021106397,
title = {Quality Assessment in Systematic Literature Reviews: A Software Engineering Perspective},
journal = {Information and Software Technology},
volume = {130},
pages = {106397},
year = {2021},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2020.106397},
url = {https://www.sciencedirect.com/science/article/pii/S0950584920301610},
author = {Lanxin Yang and He Zhang and Haifeng Shen and Xin Huang and Xin Zhou and Guoping Rong and Dong Shao},
keywords = {Quality assessment, Systematic (literature) review, Tertiary study, Empirical software engineering, Evidence-based software engineering},
abstract = {Context: Quality Assessment (QA) of reviewed literature is paramount to a Systematic Literature Review (SLR) as the quality of conclusions completely depends on the quality of selected literature. A number 
of researchers in Software Engineering (SE) have developed a variety of QA instruments and also reported their challenges. We previously conducted 
a tertiary study on SLRs with QA from 2004 to 2013, and reported the findings in 2015. Objective: With the widespread use of SLRs in SE and the increasing adoption of QA in these SLRs in recent years, it is necessary to 
empirically investigate whether the previous conclusions are still valid and whether there are new insights to the subject in question using a larger and a more up-to-date SLR set. More importantly, we aim to depict a clear picture of QA used in SLRs in SE by aggregating and distilling good practices, including the commonly used QA instruments as well as the major roles and aspects of QA in research. Method: An extended tertiary study 
was conducted with the newly collected SLRs from 2014 to 2018 and the original SLRs from 2004 to 2013 to systematically review the QA used by SLRs 
in SE during the 15-year period from 2004 to 2018. In addition, this extended study also compared and contrasted the findings of the previous study conducted in 2015. Results: A total of 241 SLRs between 2004 and 2018 were included, from which we identified a number of QA instruments. These instruments are generally designed to focus on the rationality of study design, the rigor of study execution and analysis, and the credibility and 
contribution of study findings and conclusions, with the emphasis largely 
placed on its rigor. The quality data is mainly used for literature selection or as evidence to support conclusions. Conclusions: QA has received much attention in SE in more recent years and the improvement is evident since the last study in 2015. New findings show that the aims are more concise, the instruments are more diverse and rigorous, and the criteria are more thoughtful.}
}
@article{RAATIKAINEN2019485,
title = {Software product lines and variability modeling: A tertiary study},
journal = {Journal of Systems and Software},
volume = {149},
pages = {485-510},
year = {2019},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2018.12.027},
url = {https://www.sciencedirect.com/science/article/pii/S016412121830284X},
author = {Mikko Raatikainen and Juha Tiihonen and Tomi Männistö},
keywords = {Software product line, Variability, Variability modeling, Systematic literature review, Mapping study, Tertiary study},
abstract = {Context: A software product line is a means to develop a set of products in which variability is a central phenomenon captured in variability models. The field of SPLs and variability have been topics of extensive research over the few past decades. Objective: This research characterizes systematic reviews (SRs) in the field, studies how SRs analyze 
and use evidence-based results, and identifies how variability is modeled. Method: We conducted a tertiary study as a form of systematic review. 
Results: 86 SRs were included. SRs have become a widely adopted methodology covering the field broadly otherwise except for variability realization. Numerous variability models exist that cover different development artifacts, but the evidence is insufficient in quantity and immature, and we 
argue for better evidence. SRs perform well in searching and selecting studies and presenting data. However, their analysis and use of the quality 
of and evidence in the primary studies often remains shallow, merely presenting of what kinds of evidence exist. Conclusions: There is a need for actionable, context-sensitive, and evaluated solutions rather than novel ones. Different kinds of SRs (SLRs and Maps) need to be better distinguished, and evidence and quality need to be better used in the resulting syntheses.}
}
@article{BUDGEN201862,
title = {Reporting systematic reviews: Some lessons from a tertiary study},
journal = {Information and Software Technology},
volume = {95},
pages = {62-74},
year = {2018},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2017.10.017},
url = {https://www.sciencedirect.com/science/article/pii/S0950584916303548},
author = {David Budgen and Pearl Brereton and Sarah Drummond and Nikki Williams},
keywords = {Systematic review, Reporting quality, Provenance of findings},
abstract = {Context
Many of the systematic reviews published in software engineering are related to research or methodological issues and hence are unlikely to be of direct benefit to practitioners or teachers. Those that are relevant to practice and teaching need to be presented in a form that makes their findings usable with minimum interpretation.
Objective
We have examined a sample of the many systematic reviews that have been published over a period of six years, in order to assess how well these are reported and identify useful lessons about how this might be done.
Method
We undertook a tertiary study, performing a systematic review of systematic reviews. Our study found 178 systematic reviews published in a set of major software engineering journals over the period 2010–2015. Of 
these, 37 provided recommendations or conclusions of relevance to education and/or practice and we used the DARE criteria as well as other attributes related to the systematic review process to analyse how well they were reported.
Results
We have derived a set of 12 ‘lessons’ that could help authors with reporting the outcomes of a systematic review in software engineering. We also provide an associated checklist for use by journal and conference referees.
Conclusion
There are several areas where better reporting is needed, including quality assessment, synthesis, and the procedures followed by the reviewers. Researchers, practitioners, teachers and journal referees would all benefit from better reporting of systematic reviews, both for clarity and also for establishing the provenance of any findings.}
}
@article{ABEDINNIA2017403,
title = {Machine scheduling problems in production: A tertiary study},
journal = {Computers & Industrial Engineering},
volume = {111},
pages = {403-416},
year = {2017},
issn = {0360-8352},
doi = {https://doi.org/10.1016/j.cie.2017.06.026},
url = {https://www.sciencedirect.com/science/article/pii/S0360835217302784},
author = {Hamid Abedinnia and Christoph H. Glock and Eric H. Grosse and 
Michael Schneider},
keywords = {Systematic literature review, Review of reviews, Scheduling 
in production, Machine scheduling, Tertiary study},
abstract = {This paper presents the results of a comprehensive and systematic review of 129 literature reviews on machine scheduling problems in 
production (MSPP). The paper first proposes a conceptual framework that considers the main attributes of MSPP in seven categories and 75 sub-categories. After a descriptive analysis of the sampled papers that give insights into publication patterns for MSPP, a quantitative analysis of the sampled review papers is carried out based on the proposed framework. A synthesis of research findings describes the state-of-knowledge and unveils general deficiencies of literature reviews on MSPP. In addition, the paper provides a comprehensive overview of MSPP, which supports researchers in positioning their own work in the literature and in finding potential innovative research areas. The paper concludes with an outlook on future research opportunities in the area of MSPP.}
}
@article{KITCHENHAM2010792,
title = {Systematic literature reviews in software engineering – 
A tertiary study},
journal = {Information and Software Technology},
volume = {52},
number = {8},
pages = {792-805},
year = {2010},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2010.03.006},
url = {https://www.sciencedirect.com/science/article/pii/S0950584910000467},
author = {Barbara Kitchenham and Rialette Pretorius and David Budgen and O. {Pearl Brereton} and Mark Turner and Mahmood Niazi and Stephen Linkman},
keywords = {Systematic literature review, Mapping study, Software engineering, Tertiary study},
abstract = {Context
In a previous study, we reported on a systematic literature review (SLR), 
based on a manual search of 13 journals and conferences undertaken in the 
period 1st January 2004 to 30th June 2007.
Objective
The aim of this on-going research is to provide an annotated catalogue of 
SLRs available to software engineering researchers and practitioners. This study updates our previous study using a broad automated search.
Method
We performed a broad automated search to find SLRs published in the time period 1st January 2004 to 30th June 2008. We contrast the number, quality and source of these SLRs with SLRs found in the original study.
Results
Our broad search found an additional 35 SLRs corresponding to 33 unique studies. Of these papers, 17 appeared relevant to the undergraduate educational curriculum and 12 appeared of possible interest to practitioners. The number of SLRs being published is increasing. The quality of papers in 
conferences and workshops has improved as more researchers use SLR guidelines.
Conclusion
SLRs appear to have gone past the stage of being used solely by innovators but cannot yet be considered a main stream software engineering research methodology. They are addressing a wide range of topics but still have limitations, such as often failing to assess primary study quality.}
}
@article{GAROUSI2016195,
title = {A systematic literature review of literature reviews in software testing},
journal = {Information and Software Technology},
volume = {80},
pages = {195-216},
year = {2016},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2016.09.002},
url = {https://www.sciencedirect.com/science/article/pii/S0950584916301446},
author = {Vahid Garousi and Mika V. Mäntylä},
keywords = {Secondary studies, Tertiary study, Software testing, Systematic mapping, Systematic literature reviews, Surveys},
abstract = {Context
Any newcomer or industrial practitioner is likely to experience difficulties in digesting large volumes of knowledge in software testing. In an ideal world, all knowledge used in industry, education and research should be based on high-quality evidence. Since no decision should be made based 
on a single study, secondary studies become essential in presenting the evidence. According to our search, over 101 secondary studies have been published in the area of software testing since 1994. With this high number 
of secondary studies, it is important to conduct a review in this area to 
provide an overview of the research landscape in this area.
Objective
The goal of this study is to systematically map (classify) the secondary studies in software testing. We propose that tertiary studies can serve as summarizing indexes which facilitate finding the most relevant information from secondary studies and thus supporting evidence-based decision making in any given area of software engineering. Our research questions (RQs) investigate: (1) Software-testing-specific areas, (2) Types of RQs investigated, (3) Numbers and Trends, and (4) Citations of the secondary studies.
Method
To conduct the tertiary study, we use the systematic-mapping approach. Additionally, we contrast the testing topics to the number of Google hits to address a general popularity of a testing topic and study the most popular papers in terms of citations. We furthermore demonstrate the practicality and usefulness of our results by mapping them to ISTQB foundation syllabus and to SWEBOK to provide implications for practitioners, testing educators, and researchers.
Results
After a systematic search and voting process, our study pool included 101 
secondary studies in the area of software testing between 1994 and 2015. Among our results are the following: (1) In terms of number of secondary studies, model-based approach is the most popular testing method, web services are the most popular system under test (SUT), while regression testing is the most popular testing phase; (2) The quality of secondary studies, as measured by a criteria set established in the community, is slowly 
increasing as the years go by; and (3) Analysis of research questions, raised and studied in the pool of secondary studies, showed that there is a 
lack of ‘causality’ and ‘relationship’ type of research questions, a situation which needs to be improved if we, as a community, want to advance as a scientific field. (4) Among secondary 
studies, we found that regular surveys receive significantly more citations than SMs (p=0.009) and SLRs (p=0.014).
Conclusion
Despite the large number of secondary studies, we found that many important areas of software testing currently lack secondary studies, e.g., test 
management, role of product risk in testing, human factors in software testing, beta-testing (A/B-testing), exploratory testing, testability, test 
stopping criteria, and test-environment development. Having secondary studies in those areas is important for satisfying industrial and educational needs in software testing. On the other hand, education material of ISTQB foundation syllabus and SWEBOK could benefit from the inclusion of the 
latest research topics, namely search-based testing, use of cloud-computing for testing and symbolic execution.}
}
@article{PEREZ2020110657,
title = {Systematic literature reviews in software engineering—enhancement of the study selection process using Cohen’s Kappa statistic},
journal = {Journal of Systems and Software},
volume = {168},
pages = {110657},
year = {2020},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2020.110657},
url = {https://www.sciencedirect.com/science/article/pii/S0164121220301217},
author = {Jorge Pérez and Jessica Díaz and Javier Garcia-Martin and Bernardo Tabuenca},
keywords = {Systematic review, Evidence-based practice, Cohen’s 
kappa},
abstract = {Context:
Systematic literature reviews (SLRs) rely on a rigorous and auditable methodology for minimizing biases and ensuring reliability. A common kind of 
bias arises when selecting studies using a set of inclusion/exclusion criteria. This bias can be decreased through dual revision, which makes the selection process more time-consuming and remains prone to generating bias depending on how each researcher interprets the inclusion/exclusion criteria.
Objective:
To reduce the bias and time spent in the study selection process, this paper presents a process for selecting studies based on the use of Cohen’s Kappa statistic. We have defined an iterative process based on the use of this statistic during which the criteria are refined until obtain almost perfect agreement (k>0.8). At this point, the two researchers interpret the selection criteria in the same way, and thus, the bias is reduced. Starting from this agreement, dual review can be eliminated; consequently, the time spent is drastically shortened.
Method:
The feasibility of this iterative process for selecting studies is demonstrated through a tertiary study in the area of software engineering on works that were published from 2005 to 2018.
Results:
The time saved in the study selection process was 28% (for 152 studies) and if the number of studies is sufficiently large, the time saved tend asymptotically to 50%.
Conclusions:
Researchers and students may take advantage of this iterative process for 
selecting studies when conducting SLRs to reduce bias in the interpretation of inclusion and exclusion criteria. It is especially useful for research with few resources.}
}
@article{NEPOMUCENO201940,
title = {On the need to update systematic literature reviews},
journal = {Information and Software Technology},
volume = {109},
pages = {40-42},
year = {2019},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2019.01.005},
url = {https://www.sciencedirect.com/science/article/pii/S0950584919300072},
author = {Vilmar Nepomuceno and Sergio Soares},
keywords = {Systematic literature review, Systematic mapping, Tertiary studies, Updates, Evidence based software engineering},
abstract = {Context
Many Systematic Literature Reviews (SLRs) were performed in the recent past, but just a few are being updated. Keeping SLRs updated is essential to prolong their lifespan.
Objective
To give a picture about how SLRs are being updated and what researchers think about SLRs updates.
Method
In this work, we present a Systematic Mapping (SM) study about SLRs updates and a survey with EBSE researchers that published their SLRs between 2011 and 2015.
Results
We included 22 studies in the SM, where 15 changed some artifact from the 
original study, including changes in research questions. We obtained 28 answers in our survey with SLRs authors that, in general, consolidate interpretations retrieved from the SM, but some answers did not.
Conclusion
SLRs may lose their impact over the years. Identifying actions to keep them updated is of great importance to SLR research field.}
}
@article{BARROSJUSTO2019103352,
title = {Trends in software reuse research: A tertiary study},
journal = {Computer Standards & Interfaces},
volume = {66},
pages = {103352},
year = {2019},
issn = {0920-5489},
doi = {https://doi.org/10.1016/j.csi.2019.04.011},
url = {https://www.sciencedirect.com/science/article/pii/S092054891830463X},
author = {José L. Barros-Justo and Fabiane B.V. Benitti and Santiago Matalonga},
keywords = {Software reuse, Trends in software reuse, Systematic literature review, Tertiary study},
abstract = {Context
The reuse of software has been a research topic for more than 50 years. Throughout that time, many approaches, tools and proposed techniques have reached maturity. However, it is not yet a widespread practice and some issues need to be further investigated. The latest study on software reuse 
trends dates back to 2005 and we think that it should be updated.
Objective
To identify the current trends in software reuse research.
Method
A tertiary study based on systematic secondary studies published up to July 2018.
Results
We identified 4,423 works related to software reuse, from which 3,102 were filtered by selection criteria and quality assessment to produce a final set of 56 relevant studies. We identified 30 current research topics and 127 proposals for future work, grouped into three broad categories: Software Product Lines, Other reuse approaches and General reuse topics.
Conclusions
Frequently reported topics include: Requirements and Testing in the category of Lifecycle phases for Software Product Lines, and Systematic reuse for decision making in the category of General Reuse. The most mentioned future work proposals were Requirements, and Evolution and Variability management for Software Product Lines, and Systematic reuse for decision making. The identified trends, based on future work proposals, demonstrate that software reuse is still an interesting area for research. Researchers can use these trends as a guide to lead their future projects.}
}
@article{BUDGEN2018234,
title = {The contribution that empirical studies performed in industry make to the findings of systematic reviews: A tertiary study},
journal = {Information and Software Technology},
volume = {94},
pages = {234-244},
year = {2018},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2017.10.012},
url = {https://www.sciencedirect.com/science/article/pii/S0950584917303798},
author = {David Budgen and Pearl Brereton and Nikki Williams and Sarah Drummond},
keywords = {Systematic review, Primary study, Industry study, Case study},
abstract = {Context
Systematic reviews can provide useful knowledge for software engineering practice, by aggregating and synthesising empirical studies related to a specific topic.
Objective
We sought to assess how far the findings of systematic reviews addressing 
practice-oriented topics have been derived from empirical studies that were performed in industry or that used industry data.
Method
We drew upon and augmented the data obtained from a tertiary study that performed a systematic review of systematic reviews published in the period up to the end of 2015, seeking to identify those with findings that are 
relevant for teaching and practice. For the supplementary analysis reported here, we then examined the profiles of the primary studies as reported 
in each systematic review.
Results
We identified 48 systematic reviews as candidates for further analysis. The many differences that arise between systematic reviews, together with the incompleteness of reporting for these, mean that our counts should be 
treated as indicative rather than definitive. However, even when allowing 
for problems of classification, the findings from the majority of these systematic reviews were predominantly derived from using primary studies conducted in industry. There was also an emphasis upon the use of case studies, and a number of the systematic reviews also made some use of weaker 
‘experience’ or even ‘opinion’ papers.
Conclusions
Primary studies from industry play an important role as inputs to systematic reviews. Using more rigorous industry-based primary studies can give greater authority to the findings of the systematic reviews, and should help with the creation of a corpus of sound empirical data to support evidence-informed decisions.}
}
@article{ZHANG20131341,
title = {Systematic reviews in software engineering: An empirical investigation},
journal = {Information and Software Technology},
volume = {55},
number = {7},
pages = {1341-1354},
year = {2013},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2012.09.008},
url = {https://www.sciencedirect.com/science/article/pii/S0950584912002029},
author = {He Zhang and Muhammad {Ali Babar}},
keywords = {Systematic (literature) reviews, Evidence-based software engineering, Research methodology, Methodology adoption, Mixed-methods research, Tertiary study},
abstract = {Background
Systematic Literature Reviews (SLRs) have gained significant popularity among Software Engineering (SE) researchers since 2004. Several researchers have also been working on improving the scientific and methodological infrastructure to support SLRs in SE. We argue that there is also an apparent and essential need for evidence-based body of knowledge about different aspects of the adoption of SLRs in SE.
Objective
The main objective of this research is to empirically investigate the adoption, value, and use of SLRs in SE research from various perspectives.
Method
We used mixed-methods approach (systematically integrating tertiary literature review, semi-structured interviews and questionnaire-based survey) as it is based on a combination of complementary research methods which are expected to compensate each others’ limitations.
Results
A large majority of the participants are convinced of the value of using a rigourous and systematic methodology for literature reviews in SE research. However, there are concerns about the required time and resources for SLRs. One of the most important motivators for performing SLRs is new findings and inception of innovative ideas for further research. The reported SLRs are more influential compared to the traditional literature reviews in terms of number of citations. One of the main challenges of conducting SLRs is drawing a balance between methodological rigour and required 
effort.
Conclusions
SLR has become a popular research methodology for conducting literature review and evidence aggregation in SE. There is an overall positive perception about this relatively new methodology to SE research. The findings provide interesting insights into different aspects of SLRs. We expect that the findings can provide valuable information to readers about what can 
be expected from conducting SLRs and the potential impact of such reviews.}
}
@article{CURCIO201961,
title = {Usability in agile software development: A tertiary study},
journal = {Computer Standards & Interfaces},
volume = {64},
pages = {61-77},
year = {2019},
issn = {0920-5489},
doi = {https://doi.org/10.1016/j.csi.2018.12.003},
url = {https://www.sciencedirect.com/science/article/pii/S0920548918302587},
author = {Karina Curcio and Rodolfo Santana and Sheila Reinehr and Andreia Malucelli},
keywords = {Agile software development, Usability, User-centered design, Systematic literature review, Tertiary study},
abstract = {In the last years the interest in developing research on integration of usability and agile software development has been increasing. The number of systematic literature reviews, systematic mapping studies and non-systematic reviews, related to this thematic has also increased. Nevertheless, there is no analysis on the quality of these published secondary studies, nor is there a consolidated research that brings the answer of how to integrate these two areas. The goal of this paper is to categorize secondary studies related to the integration of usability and agile software development and present a critical analysis on the quality of the selected studies. To accomplish this goal a tertiary study was performed to categorize the related studies selected. Initially 3,065 papers were identified and further narrowed to 14 by applying exclusion criteria 
and analysis. We classified the selected studies as systematic literature 
reviews, systematic mapping studies and non-systematic literature reviews 
to report the data analysis. As a result of this study different forms to 
integrate usability and agile software development were detected as well as the various challenges that must be overcome for the integration success. Six main categories were identified to represent ways of integrating usability into agile development: processes, techniques, practices, recommendations, principles and different approaches. Regarding to the challenges for the integration seven main categories were also identified: issues related to tests, time, work balance, modularization, feedback, prioritization, and documentation. Although the interest in researching the integration of usability and agile software development has increased in the last years, mostly of the analyzed studies neglected the quality criteria 
and presented difficulties to use methods to synthetize the research results. Despite this, it has been realized that the integration of usability 
with agile software development is possible and is strongly aligned with user-centered design. The initial studies indicated a separation of activities and roles into specific tracks with parallel work to treat usability in agile software development, but the trend is no longer to manage and 
control these activities in separate ways, so new challenges are becoming 
to appear. Although we have identified several points of tension, the integration does not become unfeasible.}
}
@article{GLOCK201439,
title = {The lot sizing problem: A tertiary study},
journal = {International Journal of Production Economics},
volume = {155},
pages = {39-51},
year = {2014},
note = {Celebrating a century of the economic order quantity model},
issn = {0925-5273},
doi = {https://doi.org/10.1016/j.ijpe.2013.12.009},
url = {https://www.sciencedirect.com/science/article/pii/S0925527313005689},
author = {Christoph H. Glock and Eric H. Grosse and Jörg M. Ries},
keywords = {Systematic literature review, Tertiary study, Lot sizing, Lot size, Economic order quantity, Economic production quantity},
abstract = {This paper provides a survey of literature reviews in the area of lot sizing. Its intention is to show which streams of research emerged from Harris' seminal lot size model, and which major achievements have been accomplished in the respective areas. We first develop the methodology of this review and then descriptively analyze the sample. Subsequently, a content-related classification scheme for lot sizing models is developed, and the reviews contained in our sample are discussed in light of 
this classification scheme. Our analysis shows that various extensions of 
Harris' lot size model were developed over the years, such as lot sizing models that include multi-stage inventory systems, incentives, or productivity issues. The aims of our tertiary study are the following: firstly, it helps primary researchers to position their own work in the literature, to reproduce the development of different types of lot sizing problems, 
and to find starting points if they intend to work in a new research direction. Secondly, the study identifies several topics that offer opportunities for future secondary research.}
}
@article{VERNER201454,
title = {Risks and risk mitigation in global software development: A tertiary study},
journal = {Information and Software Technology},
volume = {56},
number = {1},
pages = {54-78},
year = {2014},
note = {Special sections on International Conference on Global Software 
Engineering – August 2011 and Evaluation and Assessment in Software Engineering – April 2012},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2013.06.005},
url = {https://www.sciencedirect.com/science/article/pii/S0950584913001341},
author = {J.M. Verner and O.P. Brereton and B.A. Kitchenham and M. Turner and M. Niazi},
keywords = {Global software development, Systematic literature review, Tertiary review, Risk, Risk mitigation, Evidence},
abstract = {Context There is extensive interest in global software development (GSD) which has led to a large number of papers reporting on GSD. 
A number of systematic literature reviews (SLRs) have attempted to aggregate information from individual studies.
Objective
We wish to investigate GSD SLR research with a focus on discovering what research has been conducted in the area and to determine if the SLRs furnish appropriate risk and risk mitigation advice to provide guidance to organizations involved with GSD.
Method
We performed a broad automated search to identify GSD SLRs. Data extracted from each study included: (1) authors, their affiliation and publishing 
venue, (2) SLR quality, (3) research focus, (4) GSD risks, (5) risk mitigation strategies and, (6) for each SLR the number of primary studies reporting each risk and risk mitigation strategy.
Results
We found a total of 37 papers reporting 24 unique GSD SLR studies. Major GSD topics covered include: (1) organizational environment, (2) project execution, (3) project planning and control and (4) project scope and requirements. We extracted 85 risks and 77 risk mitigation advice items and categorized them under four major headings: outsourcing rationale, software development, human resources, and project management. The largest group 
of risks was related to project management. GSD outsourcing rationale risks ranked highest in terms of primary study support but in many cases these risks were only identified by a single SLR.
Conclusions
The focus of the GSD SLRs we identified is mapping the research rather than providing evidence-based guidance to industry. Empirical support for the majority of risks identified is moderate to low, both in terms of the number of SLRs identifying the risk, and in the number of primary studies 
providing empirical support. Risk mitigation advice is also limited, and empirical support for these items is low.}
}
@article{KHAN2019396,
title = {Landscaping systematic mapping studies in software engineering: A tertiary study},
journal = {Journal of Systems and Software},
volume = {149},
pages = {396-436},
year = {2019},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2018.12.018},
url = {https://www.sciencedirect.com/science/article/pii/S0164121218302784},
author = {Muhammad Uzair Khan and Salman Sherin and Muhammad Zohaib Iqbal and Rubab Zahid},
keywords = {Tertiary study, Systematic mapping study, Secondary study, Survey, Software engineering},
abstract = {Context
A number of Systematic Mapping Studies (SMSs) that cover Software Engineering (SE) are reported in literature. Tertiary studies synthesize the secondary studies to provide a holistic view of an area.
Objectives
We synthesize SMSs in SE to provide insights into existing SE areas and to investigate the trends and quality of SMSs.
Methodology
We use Systematic Literature Review protocol to analyze and map the SMSs in SE, till August 2017, to SE Body of Knowledge (SWEBOK).
Results
We analyze 210 SMSs and results show that: (1) Software design and construction are most active areas in SE; (2) Some areas lack SMSs, including mathematical foundations, software configuration management, and SE tools; 
(3) The quality of SMSs is improving with time; (4) SMSs in journals have 
higher quality than SMSs in conferences and are cited more often; (5) Low 
quality in SMSs can be attributed to a lack of quality assessment in SMSs 
and not reporting information about the primary studies.
Conclusion
There is a potential for more SMSs in some SE areas. A number of SMSs do not provide the required information for an SMS, which leads to a low quality score.}
}