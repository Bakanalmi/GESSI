@INPROCEEDINGS{9202826,
author={R. {Fatima} and A. {Yasin} and L. {Liu} and J. {Wang}},
booktitle={2020 IEEE 44th Annual Computers, Software, and Applications Conference (COMPSAC)}, title={Google Scholar vs. Dblp vs. Microsoft Academic Search: An Indexing Comparison for Software Engineering Literature},
year={2020},
volume={},
number={},
pages={1097-1098},
abstract={Background: One of the necessary conditions for any substantial research work is to synthesis the depth and the breath of the existing published literature on that topic. It is, thus, of extreme importance for a researcher to understand and look for both credible and exhaustive information sources. This first (important) step can be made significantly easier if the researcher can employ a more systematic way to extract the maximum of the literature on the topic. Objective: Essentially, the objective of this preliminary study is to rank three freely available academic search engines (Google Scholar, DBLP, Microsoft Academic Search) on the basis of the indexed Software Engineering academic literature they contain. Method: We have used a systematic mapping to conduct the study. Results: After extracting and analyzing 1067 secondary studies (from 18 tertiary studies), we have concluded that Google Scholar has indexed 98.96%, DBLP has indexed 93.43%, and Microsoft Academic Search engine has indexed 97.46% of the secondary studies. Thus, this implies that Google Scholar and Microsoft Academic Search might be a better-suited option for searching for secondary studies.},
keywords={Google;Systematics;Software engineering;Software;Bibliographies;Search engines;Indexing;Search Engines;Google Scholar;dblp;Microsoft Academic Search;Software Engineering;Indexing;Tertiary Study;Mapping Study},
doi={10.1109/COMPSAC48688.2020.0-122},
ISSN={0730-3157},
month={July},}
@ARTICLE{8984351,
author={A. {Yasin} and R. {Fatima} and L. {Wen} and W. {Afzal} and M. {Azhar} and R. {Torkar}},
journal={IEEE Access}, title={On Using Grey Literature and Google Scholar in Systematic Literature Reviews in Software Engineering},
year={2020},
volume={8},
number={},
pages={36226-36243},
abstract={Context: The inclusion of grey literature (GL) is important to remove publication bias while gathering available evidence regarding a certain topic. The number of systematic literature reviews (SLRs) in Software Engineering (SE) is increasing but we do not know about the extent of GL usage in these SLRs. Moreover, Google Scholar is rapidly becoming a search engine of choice for many researchers but the extent to which it can find the primary studies is not known. Objective: This tertiary study is an attempt to i) measure the usage of GL in SLRs in SE. Furthermore this study proposes strategies for categorizing GL and a quality checklist to use for GL in future SLRs; ii) explore if it is feasible to use only Google Scholar for finding scholarly articles for academic research. Method: We have conducted a systematic mapping study to measure the extent of GL usage in SE SLRs as well as to measure the feasibility of finding primary studies using Google Scholar. Results and conclusions: a) Grey Literature: 76.09% SLRs (105 out of 138) in SE have included one or more GL studies as primary studies. Among total primary studies across all SLRs (6307), 582 are classified as GL, making the frequency of GL citing as 9.23%. The intensity of GL use indicate that each SLR contains 5 primary studies on average (total intensity of GL use being 5.54). The ranking of GL tells us that conference papers are the most used form 43.3% followed by technical reports 28.52%. Universities, research institutes, labs and scientific societies together make up 67.7% of GL used, indicating that these are useful sources for searching GL. We additionally propose strategies for categorizing GL and criteria for evaluating GL quality, which can become a basis for more detailed guidelines for including GL in future SLRs. b) Google Scholar Results: The results show that Google Scholar was able to retrieve 96% of primary studies of these SLRs. Most of the primary studies that were not found using Google Scholar were from grey sources.},
keywords={Systematics;Google;Software engineering;Bibliographies;Internet;Databases;Guidelines;Grey literature;Google scholar;software engineering;empirical evaluation;systematic mapping;tertiary study;gray;quality checklist},
doi={10.1109/ACCESS.2020.2971712},
ISSN={2169-3536},
month={},}
@INPROCEEDINGS{8870142,
author={G. T. G. {Neto} and W. B. {Santos} and P. T. {Endo} and R. A. A. {Fagundes}},
booktitle={2019 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)}, title={Multivocal literature reviews in software engineering: Preliminary findings from a tertiary study},
year={2019},
volume={},
number={},
pages={1-6},
abstract={Background: In recent years, studies involving Grey Literature (GL) have been growing and attracting the attention of researchers in software engineering (SE). One of the sources of GL refers to content produced by professionals based on their practical experiences? Recent researches in the SE states that GL can complement areas of research that are not yet clearly defined in the scientific literature. In this context, the Multivocal Literature Review (MLR), a form of Systematic Literature Review (SLR) with the inclusion of GL, emerges. Goal: Provide preliminary work about the current research involving MLR studies? First, we investigate the motivation of the researchers to include GL in review studies; and second, we examine how GL was included in the studies. Method: A tertiary study was conducted to search MLR studies published between 2009 to April of 2019. Results: The main motivations for including GL in review studies are: lack of academic research on the topic, emerging research on this topic, and complementary evidence in the GL? Internet articles and white papers were the main sources of GL data used. Conclusions: The conducting of MLR studies is still in its early stages; we have identified only 12 secondary studies. The MLR studies were conducted using guidelines for performing SLRs. What we consider to be a threat to the validity of these studies, since guidelines to conduct SLR studies do not provide recommendations for quality analysis and synthesis of primary studies, including GL.},
keywords={Bibliographies;Software engineering;Software;Guidelines;Systematics;Libraries;Industries},
doi={10.1109/ESEM.2019.8870142},
ISSN={1949-3789},
month={Sep.},}
@INPROCEEDINGS{8725134,
author={A. {Garcia-Holgado} and A. {V치zquez-Ingelmo} and S. {Verdugo-Castro} and C. {Gonz치lez} and M. C. S. {G칩mez} and F. J. {Garcia-Pe침alvo}},
booktitle={2019 IEEE Global Engineering Education Conference (EDUCON)}, title={Actions to Promote Diversity in Engineering Studies: a Case Study in a Computer Science Degree},
year={2019},
volume={},
number={},
pages={793-800},
abstract={In the fields of Sciences, Technology, Engineering and Mathematics, both in career and professional contexts, the society is underrepresented. Technology is part of daily life for most of the population, the introduction of concepts such as diversity and inclusion when developing technology is a crucial objective to achieve a society built on these values. Software and technology must be developed taking into account people, converting diversity and equity concepts related to technological development. The main objective of this work is to describe a case study implemented in the Software Engineering I subject of the Degree in Computer Engineering of the University of Salamanca (Spain) to lay the foundations to establish actions to foster diversity and inclusion into engineering curricula.},
keywords={Iron;IP networks;Engineering education;Conferences;Frequency modulation;diversity;inclusion;gender gap;engineering;gamification;ethic;software engineering;tertiary education;active learning},
doi={10.1109/EDUCON.2019.8725134},
ISSN={2165-9567},
month={April},}
@INPROCEEDINGS{8807575,
author={R. {Florea} and V. {Stray}},
booktitle={2019 ACM/IEEE 14th International Conference on Global Software Engineering (ICGSE)}, title={A Global View on the Hard Skills and Testing Tools in Software Testing},
year={2019},
volume={},
number={},
pages={143-151},
abstract={Developing software with high quality is challenging in distributed software development. The purpose of the current study is to investigate the testing skills and tools required in the ever-changing world of global software engineering, according to industrial needs. We analysed 500 job ads from 33 countries. The results show that a quarter of the testers and a fifth of developers are asked to work in distributed projects. The testers are asked to be highly skilled in a variety of test activities and tools, while the testing-skills demand for developers is low and somewhat vague. The profile of testers has a strong technical component in addition to the managerial one. Our findings show that employers need most that testers are competent in automated testing. Furthermore, the industry does not cover all aspects of testing with the demand for testers and developers. Surprisingly, neither role is asked to test the implementation of the general data protection requirements. Our study bridges the industrial needs and the practitioners' skill development process. Therefore, software testers can use our study as a reference point to enhance their skills. Employers should use our results to check their testing-skill coverage within the development teams. Tertiary education providers are encouraged to use our findings, to update the curriculum in the software development area.},
keywords={Tools;Software;Software testing;Market research;Software engineering;Industries;Software testing skills, Software testing tools, Automated testing, Manual testing, Unit testing, Global Software Engineering, GDPR},
doi={10.1109/ICGSE.2019.00035},
ISSN={},
month={May},}
@INPROCEEDINGS{8900972,
author={L. {Bedu} and O. {Tinh} and F. {Petrillo}},
booktitle={2019 Working Conference on Software Visualization (VISSOFT)}, title={A Tertiary Systematic Literature Review on Software Visualization},
year={2019},
volume={},
number={},
pages={33-44},
abstract={Software visualization (SV) allows us to visualize different aspects and artifacts related to software, thus helping engineers understanding its underlying design and functionalities in a more efficient and faster way. In this paper, we conducted a tertiary systematic literature review to identify, classify, and evaluate the current state of the art on software visualization from 48 software visualization secondary studies, following three perspectives: publication trends, software visualization topics and techniques, and issues related to research field. Hence, we summarized the main findings among popular sub-fields of SV, identifying potential research directions and fifteen shared recommendations for developers, instructors and researchers. Our main findings are the lack of rigorous evaluation or theories support to assess SV tools effectiveness, the disconnection between tool design and their scope, and the dispersal of the research community.},
keywords={Software Visualization;Tertiary;Literature Review;SLR;Visualization techniques;Information Visualization;Recommendations;Software Engineering},
doi={10.1109/VISSOFT.2019.00013},
ISSN={},
month={Sep.},}
@INPROCEEDINGS{8268247,
author={M. {Csernoch} and P. {Bir칩}},
booktitle={2017 8th IEEE International Conference on Cognitive Infocommunications (CogInfoCom)}, title={First year students' attitude to computer problem solving},
year={2017},
volume={},
number={},
pages={000225-000230},
abstract={We have administered the extended attitude test of the Testing Algorithmic and Application Skills project (TAaAS) to reveal the computer problem solving approaches of first year students of informatics, their expectations considering tertiary studies, and their relationship with computer sciences/ informatics. The results clearly indicate that the students selected this major on their own, based on their previous experiences in informatics, but that these experiences caused misconceptions rather than creating a true picture of the nature of computer sciences. Based on the analysis of the students' answers, we concluded that they are in great need of institutional support, especially at the beginning of their tertiary studies, to introduce them to computer sciences/informatics. Beyond this, we have revealed another misconception that Software Engineering students tend to focus on the coding aspect of informatics, and especially those who have taken the advanced level school leaving exam are over-confident as regards their programming skills.},
keywords={Informatics;Problem-solving;Programming profession;Education;Task analysis;Engineering profession;students of informatics;attitude;computer problem solving;computational thinking;algorithmic skills},
doi={10.1109/CogInfoCom.2017.8268247},
ISSN={},
month={Sep.},}
@INPROCEEDINGS{8425432,
author={E. {Buzek} and M. {Kruli코}},
booktitle={2018 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)}, title={An Entertaining Approach to Parallel Programming Education},
year={2018},
volume={},
number={},
pages={340-346},
abstract={Despite the facts that multicore CPUs are present in virtually every personal computer or cell phone and distributed systems in the form of cloud services are steadily penetrating various domains of our lives, only a minority of programmers and computer science graduates are able to effectively design and develop parallel and distributed applications. Serial thinking is natural to all humans and it is also encouraged by many computer science curricula. Even though that leading educational institutions are attempting to rectify this trend by introducing parallel programming courses into their study programs, these courses are often dedicated for more experienced students in their fourth of fifth year since mastering modern parallel technologies like OpenMP or CUDA requires certain level of programming skills. It can be argued, that the parallel thinking should be taught much sooner, perhaps even before tertiary education. To this end, we have created an educational platform Parapple that aims to introduce parallelism and related problems like load balancing or synchronization to inexperienced programmers in an entertaining form. Our platform is web-based, so it can run in any modern browser on all operating systems without installation and the users are required to have only a very basic understanding of structural imperative programming.},
keywords={Avatars;Encoding;Tutorials;Parallel programming;Programming profession;Parallel processing;parallel;programming;education;simple;visual;web},
doi={10.1109/IPDPSW.2018.00065},
ISSN={},
month={May},}