Scopus
EXPORT DATE: 19 April 2021

@ARTICLE{Yang2021,
author={Yang, L. and Zhang, H. and Shen, H. and Huang, X. and Zhou, X. and Rong, G. and Shao, D.},
title={Quality Assessment in Systematic Literature Reviews: A Software Engineering Perspective},
journal={Information and Software Technology},
year={2021},
volume={130},
doi={10.1016/j.infsof.2020.106397},
art_number={106397},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092661702&doi=10.1016%2fj.infsof.2020.106397&partnerID=40&md5=1e109a5870be9934c502ea77f92b4f47},
affiliation={State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Jiangsu, China; Peter Faber Business School, Australian Catholic University, Sydney, Australia},
abstract={Context: Quality Assessment (QA) of reviewed literature is paramount to a Systematic Literature Review (SLR) as the quality of conclusions completely depends on the quality of selected literature. A number of researchers in Software Engineering (SE) have developed a variety of QA instruments and also reported their challenges. We previously conducted a tertiary study on SLRs with QA from 2004 to 2013, and reported the findings in 2015. Objective: With the widespread use of SLRs in SE and the increasing adoption of QA in these SLRs in recent years, it is necessary to empirically investigate whether the previous conclusions are still valid and whether there are new insights to the subject in question using a larger and a more up-to-date SLR set. More importantly, we aim to depict a clear picture of QA used in SLRs in SE by aggregating and distilling good practices, including the commonly used QA instruments as well as the major roles and aspects of QA in research. Method: An extended tertiary study was conducted with the newly collected SLRs from 2014 to 2018 and the original SLRs from 2004 to 2013 to systematically review the QA used by SLRs in SE during the 15-year period from 2004 to 2018. In addition, this extended study also compared and contrasted the findings of the previous study conducted in 2015. Results: A total of 241 SLRs between 2004 and 2018 were included, from which we identified a number of QA instruments. These instruments are generally designed to focus on the rationality of study design, the rigor of study execution and analysis, and the credibility and contribution of study findings and conclusions, with the emphasis largely placed on its rigor. The quality data is mainly used for literature selection or as evidence to support conclusions. Conclusions: QA has received much attention in SE in more recent years and the improvement is evident since the last study in 2015. New findings show that the aims are more concise, the instruments are more diverse and rigorous, and the criteria are more thoughtful. © 2020},
document_type={Review},
source={Scopus},
}

@ARTICLE{Pérez2020,
author={Pérez, J. and Díaz, J. and Garcia-Martin, J. and Tabuenca, B.},
title={Systematic literature reviews in software engineering—enhancement of the study selection process using Cohen's Kappa statistic},
journal={Journal of Systems and Software},
year={2020},
volume={168},
doi={10.1016/j.jss.2020.110657},
art_number={110657},
note={cited By 3},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085270179&doi=10.1016%2fj.jss.2020.110657&partnerID=40&md5=79abfe45a51df2426282a8474ab1c90e},
affiliation={Universidad Politécnica de Madrid (Technical University of Madrid), Spain},
abstract={Context: Systematic literature reviews (SLRs) rely on a rigorous and auditable methodology for minimizing biases and ensuring reliability. A common kind of bias arises when selecting studies using a set of inclusion/exclusion criteria. This bias can be decreased through dual revision, which makes the selection process more time-consuming and remains prone to generating bias depending on how each researcher interprets the inclusion/exclusion criteria. Objective: To reduce the bias and time spent in the study selection process, this paper presents a process for selecting studies based on the use of Cohen's Kappa statistic. We have defined an iterative process based on the use of this statistic during which the criteria are refined until obtain almost perfect agreement (k>0.8). At this point, the two researchers interpret the selection criteria in the same way, and thus, the bias is reduced. Starting from this agreement, dual review can be eliminated; consequently, the time spent is drastically shortened. Method: The feasibility of this iterative process for selecting studies is demonstrated through a tertiary study in the area of software engineering on works that were published from 2005 to 2018. Results: The time saved in the study selection process was 28% (for 152 studies) and if the number of studies is sufficiently large, the time saved tend asymptotically to 50%. Conclusions: Researchers and students may take advantage of this iterative process for selecting studies when conducting SLRs to reduce bias in the interpretation of inclusion and exclusion criteria. It is especially useful for research with few resources. © 2020 Elsevier Inc.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Alves2020311,
author={Alves, C. and Cunha, J. and Araujo, J.},
title={On the Pragmatics of Requirements Engineering Practices in a Startup Ecosystem},
journal={Proceedings of the IEEE International Conference on Requirements Engineering},
year={2020},
volume={2020-August},
pages={311-321},
doi={10.1109/RE48521.2020.00041},
art_number={9218221},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85093915933&doi=10.1109%2fRE48521.2020.00041&partnerID=40&md5=de648a093e34fbf8fe52072f49cbd9b1},
affiliation={Universidade Federal de Pernambuco, Centro de Informática, Recife, Brazil; Nova Lincs, Di Fct Universidade Nova de Lisboa, Lisboa, Portugal},
abstract={Software startups play an important role to foster innovation, economic growth, and job creation in a region. Startups are likely to increase their odds of thriving if they are embedded in a startup ecosystem. Actors of an ecosystem cocreate value, share resources, and support the prosperous evolution of peers. In recent years, software startups have been the focus of intensive research by the software engineering community. In this paper, we conducted a tertiary study to synthesise literature in the field of requirements engineering in startups. We concluded that there are limited empirical studies reporting an in-depth contextual analysis on how software startups perform requirements engineering. In parallel, we conducted a case study of startups based at Digital Port ecosystem. Our empirical results confirm what has been presented by literature that startups adopt requirements practices in a flexible and informal manner. In fact, as novel empirical evidence, we observed that even as startups evolve by acquiring the first paying customers and growing the customer base, requirements practices remain very pragmatic. Our results also reveal how actors of the studied ecosystem interact to support the co-evolution of startups. © 2020 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Fatima20201097,
author={Fatima, R. and Yasin, A. and Liu, L. and Wang, J.},
title={Google Scholar vs. Dblp vs. Microsoft Academic Search: An Indexing Comparison for Software Engineering Literature},
journal={Proceedings - 2020 IEEE 44th Annual Computers, Software, and Applications Conference, COMPSAC 2020},
year={2020},
pages={1097-1098},
doi={10.1109/COMPSAC48688.2020.0-122},
art_number={9202826},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85094160999&doi=10.1109%2fCOMPSAC48688.2020.0-122&partnerID=40&md5=370fce530b3011e3807648d21029b236},
affiliation={School of Software, Tsinghua University, Beijing, China},
abstract={Background: One of the necessary conditions for any substantial research work is to synthesis the depth and the breath of the existing published literature on that topic. It is, thus, of extreme importance for a researcher to understand and look for both credible and exhaustive information sources. This first (important) step can be made significantly easier if the researcher can employ a more systematic way to extract the maximum of the literature on the topic. Objective: Essentially, the objective of this preliminary study is to rank three freely available academic search engines (Google Scholar, DBLP, Microsoft Academic Search) on the basis of the indexed Software Engineering academic literature they contain. Method: We have used a systematic mapping to conduct the study. Results: After extracting and analyzing 1067 secondary studies (from 18 tertiary studies), we have concluded that Google Scholar has indexed 98.96%, DBLP has indexed 93.43%, and Microsoft Academic Search engine has indexed 97.46% of the secondary studies. Thus, this implies that Google Scholar and Microsoft Academic Search might be a better-suited option for searching for secondary studies. © 2020 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sulaiman2020158,
author={Sulaiman, S. and Shahrol, S.J.M. and Samad, A.R.A.},
title={Service Learning in Application Development Course: A Case Study of a Rural Community Engagement},
journal={ACM International Conference Proceeding Series},
year={2020},
pages={158-162},
doi={10.1145/3384544.3384601},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85095685973&doi=10.1145%2f3384544.3384601&partnerID=40&md5=409bc6d3cf9b577ec17076e335839902},
affiliation={School of Computing, Faculty of Engineering, Johor Bahru, 81310, Malaysia; SMK Bandar Penawar, Bandar Penawar, Johor, 81930, Malaysia; Southeast Johor Development Authority (KEJORA), Bandar Penawar, Johor, 81930, Malaysia},
abstract={Service learning aims to expose students mainly at tertiary studies to engage with the local communities under the selected registered courses. It enables students to apply the assigned projects at the chosen community. Thus, they can learn and solve real problems. This paper reports the service-learning component that is integrated with a four-credit Application Development course for the third-year students of Semester 1, Session 2019/2020 under Bachelor of Computer Science (Software Engineering) programme at School of Computing, Universiti Teknologi Malaysia. The students were attached to a rural community project known as Centre for Advancement in Rural Education Informatics (iCARE) during the one-semester study. The students were assigned to solve the issues in mastering English among rural learners by developing either a mobile application or an augmented reality application in a team of three students. The materials were provided by the English teacher who acts as the key stakeholder to represent the rural schools in Southeast Johor region under the Southeast Johor Development Authority (KEJORA). The study shows good impacts among both the university students and the rural students selected under the study. © 2020 ACM.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{García-Mireles2020116,
author={García-Mireles, G.A. and Morales-Trujillo, M.E.},
title={Gamification in Software Engineering: A Tertiary Study},
journal={Advances in Intelligent Systems and Computing},
year={2020},
volume={1071},
pages={116-128},
doi={10.1007/978-3-030-33547-2_10},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075662683&doi=10.1007%2f978-3-030-33547-2_10&partnerID=40&md5=1e5c8f38f8f55b841550b1b0fcdd99f7},
affiliation={Departamento de Matemáticas, Universidad de Sonora, Hermosillo, Sonora, Mexico; Computer Science and Software Engineering Department, University of Canterbury, Christchurch, New Zealand},
abstract={Gamification is a research area that influences the extent to which software organizations work and educational practices can be improved in software engineering (SE). Given that several systematic reviews on gamification in SE have been published, this paper aims at understanding how gamification has been addressed, simultaneously identifying its impact on SE. As a result of this systematic mapping, we identified 12 secondary studies. The majority of papers reported the usage of points, badges, and leaderboards as game elements in software engineering process, software engineering methods and tools, and software engineering management. Although secondary studies reported a positive impact of gamification, more empirical research is required. In a nutshell, current research focuses on the feasibility of using gamification in different SE areas; however, there is a need for research of application context and for defining variables under study to carry out more sound empirical research. © 2020, Springer Nature Switzerland AG.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Budgen20207,
author={Budgen, D. and Brereton, P. and Williams, N. and Drummond, S.},
title={What support do systematic reviews provide for evidence-informed teaching about software engineering practice?},
journal={E-Informatica Software Engineering Journal},
year={2020},
volume={14},
number={1},
pages={7-60},
doi={10.37190/e-Inf200101},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083274320&doi=10.37190%2fe-Inf200101&partnerID=40&md5=acb30e10cf9509983b673320ab39f7c2},
affiliation={Department of Computer Science, Durham University, United Kingdom; School of Computing & Maths, Keele University, United Kingdom; Centre for Electronic Warfare, Information & Cyber, Cranfield University, United Kingdom},
abstract={Background: The adoption of the evidence-based research paradigm by software engineering researchers has created a growing knowledge base provided by the outcomes from systematic reviews. Aim: We set out to identify and catalogue a sample of the knowledge provided by systematic reviews, to determine what support they can provide for an evidence-informed approach to teaching about software engineering practice. Method: We undertook a tertiary study (a mapping study of systematic reviews) covering the period to the end of 2015. We identified and catalogued those reviews that had findings or made recommendations that were considered relevant to teaching about industry practice. Results: We examined a sample of 276 systematic reviews, selecting 49 for which we could clearly identify practice-oriented findings and recommendations that were supported by the data analysis provided in the review. We have classified these against established software engineering education knowledge categories and discuss the extent and forms of knowledge provided for each category. Conclusion: While systematic reviews can provide knowledge that can inform teaching about practice, relatively few systematic reviews present the outcomes in a form suitable for this purpose. Using a suitable format for presenting a summary of outcomes could improve this. Additionally, the increasing number of published systematic reviews suggests that there is a need for greater coordination regarding the cataloguing of their findings and recommendations. © 2020 Wroclaw University of Science and Technology. All rights reserved.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Yasin202036226,
author={Yasin, A. and Fatima, R. and Wen, L. and Afzal, W. and Azhar, M. and Torkar, R.},
title={On using grey literature and google scholar in systematic literature reviews in software engineering},
journal={IEEE Access},
year={2020},
volume={8},
pages={36226-36243},
doi={10.1109/ACCESS.2020.2971712},
art_number={8984351},
note={cited By 5},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85081118214&doi=10.1109%2fACCESS.2020.2971712&partnerID=40&md5=a75124ede22467628b6f5a281d53c9ca},
affiliation={School of Software, Tsinghua University, Beijing, 100084, China; School of Computing, Blekinge Institute of Technology, Karlskrona, 371 41, Sweden; School of Information, Design and Innovation, Mälardalen University, Västerås, 722 20, Sweden; College of Computer Science and Software Engineering, Shenzhen University, Shenzhen, 518060, China; Software Engineering Division, Gothunberg University, Gothenburg, 405 30, Sweden},
abstract={Context: The inclusion of grey literature (GL) is important to remove publication bias while gathering available evidence regarding a certain topic. The number of systematic literature reviews (SLRs) in Software Engineering (SE) is increasing but we do not know about the extent of GL usage in these SLRs. Moreover, Google Scholar is rapidly becoming a search engine of choice for many researchers but the extent to which it can find the primary studies is not known. Objective: This tertiary study is an attempt to i) measure the usage of GL in SLRs in SE. Furthermore this study proposes strategies for categorizing GL and a quality checklist to use for GL in future SLRs; ii) explore if it is feasible to use only Google Scholar for finding scholarly articles for academic research. Method: We have conducted a systematic mapping study to measure the extent of GL usage in SE SLRs as well as to measure the feasibility of finding primary studies using Google Scholar. Results and conclusions: a) Grey Literature: 76.09% SLRs (105 out of 138) in SE have included one or more GL studies as primary studies. Among total primary studies across all SLRs (6307), 582 are classified as GL, making the frequency of GL citing as 9.23%. The intensity of GL use indicate that each SLR contains 5 primary studies on average (total intensity of GL use being 5.54). The ranking of GL tells us that conference papers are the most used form 43.3% followed by technical reports 28.52%. Universities, research institutes, labs and scientific societies together make up 67.7% of GL used, indicating that these are useful sources for searching GL. We additionally propose strategies for categorizing GL and criteria for evaluating GL quality, which can become a basis for more detailed guidelines for including GL in future SLRs. b) Google Scholar Results: The results show that Google Scholar was able to retrieve 96% of primary studies of these SLRs. Most of the primary studies that were not found using Google Scholar were from grey sources. © 2013 IEEE.},
document_type={Review},
source={Scopus},
}

@ARTICLE{Krüger2020627,
author={Krüger, J. and Lausberger, C. and von Nostitz-Wallwitz, I. and Saake, G. and Leich, T.},
title={Search. Review. Repeat? An empirical study of threats to replicating SLR searches},
journal={Empirical Software Engineering},
year={2020},
volume={25},
number={1},
pages={627-677},
doi={10.1007/s10664-019-09763-0},
note={cited By 4},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072114420&doi=10.1007%2fs10664-019-09763-0&partnerID=40&md5=ec9ad05c36653e2835b662dbc0a00ec4},
affiliation={Otto-von-Guericke University, Magdeburg, Germany; Harz University of Applied Sciences, Wernigerode, Germany; METOP GmbH, Magdeburg, Germany},
abstract={A systematic literature review (SLR) is an empirical method used to provide an overview of existing knowledge and to aggregate evidence within a domain. For computer science, several threats to the completeness of such reviews have been identified, leading to recommendations and guidelines on how to improve their quality. However, few studies address to what extent researchers can replicate an SLR. To conduct a replication, researchers have to first understand how the set of primary studies has been identified in the original study, and can ideally retrieve the same set when following the reported protocol. In this article, we focus on this initial step of a replication and report a two-fold empirical study: Initially, we performed a tertiary study using a sample of SLRs in computer science and identified what information that is needed to replicate the searches is reported. Based on the results, we conducted a descriptive, multi-case study on digital libraries to investigate to what extent these allow replications. The results reveal two threats to replications of SLRs: First, while researchers have improved the quality of their reports, relevant details are still missing—we refer to a reporting threat. Second, we found that some digital libraries are inconsistent in their query results—we refer to a searching threat. While researchers conducting a review can only overcome the first threat and the second may not be an issue for all kinds of replications, researchers should be aware of both threats when conducting, reviewing, and building on SLRs. © 2019, Springer Science+Business Media, LLC, part of Springer Nature.},
document_type={Article},
source={Scopus},
}

@ARTICLE{NoAuthor2020,
title={8th International Conference on Software Process Improvement, CIMPS 2019},
journal={Advances in Intelligent Systems and Computing},
year={2020},
volume={1071},
page_count={288},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075642531&partnerID=40&md5=5ea5589f66ee55b8a791b12850ef91c2},
abstract={The proceedings contain 21 papers. The special focus in this conference is on International Conference on Software Process Improvement . The topics include: Gamification in Software Engineering: A Tertiary Study; knowledge Transfer in Software Companies Based on Machine Learning; linked Data and Musical Information to Improvement the Cultural and Heritage Knowledge Management; distributed System Based on Deep Learning for Vehicular Re-routing and Congestion Avoidance; from a Conceptual to a Computational Model of Cognitive Emotional Process for Engineering Students; Algorithm Proposal to Control a Robotic Arm for Physically Disable People Using the LCD Touch Screen; multithreading Programming for Feature Extraction in Digital Images; selection and Fusion of Color Channels for Ripeness Classification of Cape Gooseberry Fruits; model Driven Automatic Code Generation: An Evolutionary Approach to Disruptive Innovation Benefits; cluster Monitoring and Integration in Technology Company; objectives Patterns Applied to the Business Model of a Public Education System; a Data Driven Platform for Improving Performance Assessment of Software Defined Storage Solutions; teaching Approach for the Development of Virtual Reality Videogames; requirements Validation in the Information Systems Software Development: An Empirical Evaluation of Its Benefits for a Public Institution in Lima; towards a Social and Human Factor Classification Related to Productivity in Software Development Teams; software Product Quality in DevOps Contexts: A Systematic Literature Review; Reinforcing DevOps Generic Process with a Guidance Based on the Basic Profile of ISO/IEC 29110; a Selection Process of Graph Databases Based on Business Requirements.},
document_type={Conference Review},
source={Scopus},
}

@ARTICLE{Shakeel2019,
author={Shakeel, Y. and Krüger, J. and Von Nostitz-Wallwitz, I. and Saake, G. and Leich, T.},
title={Automated selection and quality assessment of primary studies: A systematic literature review},
journal={Journal of Data and Information Quality},
year={2019},
volume={12},
number={1},
doi={10.1145/3356901},
art_number={4},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075606160&doi=10.1145%2f3356901&partnerID=40&md5=0202b74906672b69a294fb9301191035},
affiliation={Otto-von-Guericke-University, METOP GmbH, Magdeburg, Germany; Otto-von-Guericke-University, Harz University of Applied Sciences, Magdeburg and Wernigerode, Germany; Otto-von-Guericke-University, Magdeburg, Germany; Harz University of Applied Sciences, METOP GmbH, Weringerode and Magdeburg, Germany},
abstract={Researchers use systematic literature reviews (SLRs) to synthesize existing evidence regarding a research topic. While being an important means to condense knowledge, conducting an SLR requires a large amount of time and effort. Consequently, researchers have proposed semi-automatic techniques to support different stages of the review process. Two of the most time-consuming tasks are (1) to select primary studies and (2) to assess their quality. In this article, we report an SLR in which we identify, discuss, and synthesize existing techniques of the software-engineering domain that aim to semi-automate these two tasks. Instead of solely providing statistics, we discuss these techniques in detail and compare them, aiming to improve our understanding of supported and unsupported activities. To this end, we identified eight primary studies that report unique techniques that have been published between 2007 and 2016. Most of these techniques rely on text mining and can be beneficial for researchers, but an independent validation using real SLRs is missing for most of them. Moreover, the results indicate the necessity of developing more reliable techniques, providing access to their implementations, and extending their scope to further activities to facilitate the selection and quality assessment of primary studies. © 2019 Copyright held by the owner/author(s).},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Neto2019,
author={Neto, G.T.G. and Santos, W.B. and Endo, P.T. and Roberta Fagundes, A.A.},
title={Multivocal literature reviews in software engineering: Preliminary findings from a tertiary study},
journal={International Symposium on Empirical Software Engineering and Measurement},
year={2019},
volume={2019-Septemer},
doi={10.1109/ESEM.2019.8870142},
art_number={8870142},
note={cited By 2},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074253912&doi=10.1109%2fESEM.2019.8870142&partnerID=40&md5=e2cec7bf054587337fc96e13a287e45e},
affiliation={Department of Computer Engineering, University of Pernambuco, Pernambuco, Recife, Brazil},
abstract={Background: In recent years, studies involving Grey Literature (GL) have been growing and attracting the attention of researchers in software engineering (SE). One of the sources of GL refers to content produced by professionals based on their practical experiences? Recent researches in the SE states that GL can complement areas of research that are not yet clearly defined in the scientific literature. In this context, the Multivocal Literature Review (MLR), a form of Systematic Literature Review (SLR) with the inclusion of GL, emerges. Goal: Provide preliminary work about the current research involving MLR studies? First, we investigate the motivation of the researchers to include GL in review studies; and second, we examine how GL was included in the studies. Method: A tertiary study was conducted to search MLR studies published between 2009 to April of 2019. Results: The main motivations for including GL in review studies are: lack of academic research on the topic, emerging research on this topic, and complementary evidence in the GL? Internet articles and white papers were the main sources of GL data used. Conclusions: The conducting of MLR studies is still in its early stages; we have identified only 12 secondary studies. The MLR studies were conducted using guidelines for performing SLRs. What we consider to be a threat to the validity of these studies, since guidelines to conduct SLR studies do not provide recommendations for quality analysis and synthesis of primary studies, including GL. © 2019 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{NoAuthor2019,
title={Proceedings - 13th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM 2019},
journal={International Symposium on Empirical Software Engineering and Measurement},
year={2019},
volume={2019-Septemer},
page_count={419},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074256978&partnerID=40&md5=0f078817e1999ffd6df7840a4ed7b1c9},
abstract={The proceedings contain 48 papers. The topics discussed include: framework code samples: how are they maintained and used by developers?; initial findings on the evaluation of a model-based testing tool in the test design process; do research and practice of code smell identification walk together? a social representations analysis; multivocal literature reviews in software engineering: preliminary findings from a tertiary study; software engineering research community viewpoints on rapid reviews; investigating the validity of ground truth in code reviewer recommendation studies; an evaluation of knowledge translation in software engineering; and on the relationship between coupling and refactoring: an empirical viewpoint.},
document_type={Conference Review},
source={Scopus},
}

@ARTICLE{Nepomuceno201940,
author={Nepomuceno, V. and Soares, S.},
title={On the need to update systematic literature reviews},
journal={Information and Software Technology},
year={2019},
volume={109},
pages={40-42},
doi={10.1016/j.infsof.2019.01.005},
note={cited By 7},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060085424&doi=10.1016%2fj.infsof.2019.01.005&partnerID=40&md5=f2f9a5e215d90ebe3592a9c79dd5b4f3},
affiliation={Federal University of Pernambuco (UFPE) - Av. Prof. Moraes Rego, 1235, Recife, Pernambuco  50670-901, Brazil; Federal Institute of Pernambuco (IFPE) - R. Padre Agobar Valença, s/n - Severiano Morais Filho, Garanhuns, Pernambuco  55299-390, Brazil; SENAI Innovation Institute for Information and Communication Technology - Av. Norte Miguel Arraes de Alencar, 539 - Santo Amaro, Recife, Pernambuco  50100-000, Brazil},
abstract={Context: Many Systematic Literature Reviews (SLRs) were performed in the recent past, but just a few are being updated. Keeping SLRs updated is essential to prolong their lifespan. Objective: To give a picture about how SLRs are being updated and what researchers think about SLRs updates. Method: In this work, we present a Systematic Mapping (SM) study about SLRs updates and a survey with EBSE researchers that published their SLRs between 2011 and 2015. Results: We included 22 studies in the SM, where 15 changed some artifact from the original study, including changes in research questions. We obtained 28 answers in our survey with SLRs authors that, in general, consolidate interpretations retrieved from the SM, but some answers did not. Conclusion: SLRs may lose their impact over the years. Identifying actions to keep them updated is of great importance to SLR research field. © 2019 Elsevier B.V.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Fu201968,
author={Fu, C. and Zhang, H. and Huang, X. and Zhou, X. and Li, Z.},
title={A review of meta-ethnographies in software engineering},
journal={ACM International Conference Proceeding Series},
year={2019},
pages={68-77},
doi={10.1145/3319008.3319015},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064762574&doi=10.1145%2f3319008.3319015&partnerID=40&md5=19aeb39cb1d6d4004fba2f7afb40f54d},
affiliation={College of Computer Science and Information Technology, Guangxi Normal University, China; State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, China},
abstract={Context: Data synthesis is one of the most significant tasks in Systematic Literature Review (SLR). Software Engineering (SE) researchers have adopted a variety of methods of synthesizing data that originated in other disciplines. One of the qualitative data synthesis methods is meta-ethnography, which is being used in SE SLRs. Objective: We aim at studying the adoption of meta-ethnography in SE SLRs in order to understand how this method has been used in SE. Method: We conducted a tertiary study of the use of meta-ethnography by reviewing sixteen SLRs. We carried out an empirical inquiry by integrating SLR and confirmatory email survey. Results: There is a general lack of knowledge, or even awareness, of different aspects of meta-ethnography and/or how to apply it. Conclusion: There is a need of investment in gaining in-depth knowledge and skills of correctly applying meta-ethnography in order to increase the quality and reliability of the findings generated from SE SLRs. Our study reveals that meta-ethnography is a suitable method to SE research. We discuss challenges and propose recommendations of adopting meta-ethnography in SE. Our effort also offers a preliminary checklist of the systematic considerations for doing meta-ethnography in SE and improving the quality of meta-ethnographic research in SE. © 2019 Association for Computing Machinery.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Khan2019396,
author={Khan, M.U. and Sherin, S. and Iqbal, M.Z. and Zahid, R.},
title={Landscaping systematic mapping studies in software engineering: A tertiary study},
journal={Journal of Systems and Software},
year={2019},
volume={149},
pages={396-436},
doi={10.1016/j.jss.2018.12.018},
note={cited By 5},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058845930&doi=10.1016%2fj.jss.2018.12.018&partnerID=40&md5=851b1a8deb4cb5c7dc758e7e85014310},
affiliation={Software Quality Engineering and Testing (QUEST) Laboratory, National University of Computer and Emerging Sciences, Islamabad, Pakistan},
abstract={Context: A number of Systematic Mapping Studies (SMSs) that cover Software Engineering (SE) are reported in literature. Tertiary studies synthesize the secondary studies to provide a holistic view of an area. Objectives: We synthesize SMSs in SE to provide insights into existing SE areas and to investigate the trends and quality of SMSs. Methodology: We use Systematic Literature Review protocol to analyze and map the SMSs in SE, till August 2017, to SE Body of Knowledge (SWEBOK). Results: We analyze 210 SMSs and results show that: (1) Software design and construction are most active areas in SE; (2) Some areas lack SMSs, including mathematical foundations, software configuration management, and SE tools; (3) The quality of SMSs is improving with time; (4) SMSs in journals have higher quality than SMSs in conferences and are cited more often; (5) Low quality in SMSs can be attributed to a lack of quality assessment in SMSs and not reporting information about the primary studies. Conclusion: There is a potential for more SMSs in some SE areas. A number of SMSs do not provide the required information for an SMS, which leads to a low quality score. © 2018},
document_type={Article},
source={Scopus},
}

@ARTICLE{Ampatzoglou2019201,
author={Ampatzoglou, A. and Bibi, S. and Avgeriou, P. and Verbeek, M. and Chatzigeorgiou, A.},
title={Identifying, categorizing and mitigating threats to validity in software engineering secondary studies},
journal={Information and Software Technology},
year={2019},
volume={106},
pages={201-230},
doi={10.1016/j.infsof.2018.10.006},
note={cited By 21},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054761049&doi=10.1016%2fj.infsof.2018.10.006&partnerID=40&md5=410a8cd543702f51f5ec15f46f57b958},
affiliation={Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Informatics and Telecommunications, University of Western Macedonia, Kozani, Greece; Department of Mathematics and Computer Science, University of Groningen, Netherlands},
abstract={Context: Secondary studies are vulnerable to threats to validity. Although, mitigating these threats is crucial for the credibility of these studies, we currently lack a systematic approach to identify, categorize and mitigate threats to validity for secondary studies. Objective: In this paper, we review the corpus of secondary studies, with the aim to identify: (a) the trend of reporting threats to validity, (b) the most common threats to validity and corresponding mitigation actions, and (c) possible categories in which threats to validity can be classified. Method: To achieve this goal we employ the tertiary study research method that is used for synthesizing knowledge from existing secondary studies. In particular, we collected data from more than 100 studies, published until December 2016 in top quality software engineering venues (both journals and conference). Results: Our results suggest that in recent years, secondary studies are more likely to report their threats to validity. However, the presentation of such threats is rather ad hoc, e.g., the same threat may be presented with a different name, or under a different category. To alleviate this problem, we propose a classification schema for reporting threats to validity and possible mitigation actions. Both the classification of threats and the associated mitigation actions have been validated by an empirical study, i.e., Delphi rounds with experts. Conclusion: Based on the proposed schema, we provide a checklist, which authors of secondary studies can use for identifying and categorizing threats to validity and corresponding mitigation actions, while readers of secondary studies can use the checklist for assessing the validity of the reported results. © 2018},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Ruiz2018230,
author={Ruiz, G.A. and Napoleão, B.M. and de Souza, E.F. and Felizardo, K.R. and Meinerz, G.V. and da Silva, P.R. and Vijaykumar, N.L.},
title={Using meta-ethnography to synthesize research on knowledge management and agile software development methodology},
journal={ACM International Conference Proceeding Series},
year={2018},
pages={230-239},
doi={10.1145/3275245.3275270},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056734586&doi=10.1145%2f3275245.3275270&partnerID=40&md5=0b4494a03a5cd53d54a2471baf2e5559},
affiliation={Department of Computer, Federal Technological University –, UTFPR Cornélio Procópio, PR, Brazil; Laboratory of Computing and Applied Mathematics, National Institute for Space Research, INPE São José dos Campos, SP, Brazil},
abstract={Context: Software development processes are considered as knowledge intensive and therefore Knowledge Management (KM) can be applied to efficiently manage the knowledge generated. Agile practices can benefit the software organizations in terms of KM. Some studies have already presented evidence about this relationship. However, the intersection of these two areas still require further more clarification. Objective: This study aims to synthesize research on KM and Agile Software Development (ASD) using the meta-ethnography method. Method: In order to achieve the proposed goal, first, we applied the seven phases of meta-ethnography analysis method on a five articles selected from a tertiary study on KM and ASD. Second, the relations identified between the areas investigated were analysed from interviews with three agile development methodology experts. Results: A relation map that summarizes the synthesis identified between KM, agile values and scrum activities was created. Conclusion: There is a significant contribution in KM and ASD for both software engineering academics and industry. © 2018 Association for Computing Machinery.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Rios2018117,
author={Rios, N. and Mendonça Neto, M.G.D. and Spínola, R.O.},
title={A tertiary study on technical debt: Types, management strategies, research trends, and base information for practitioners},
journal={Information and Software Technology},
year={2018},
volume={102},
pages={117-145},
doi={10.1016/j.infsof.2018.05.010},
note={cited By 45},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048168263&doi=10.1016%2fj.infsof.2018.05.010&partnerID=40&md5=710823121ee7e1f1408ff5f77ecc912b},
affiliation={Department of Computer Science, Federal University of Bahia, Salvador, Brazil; Graduate Program in Systems and Computer, Salvador University, Salvador, Brazil; Fraunhofer Project Center for Software and System Engineering, Federal University of Bahia, Salvador, Bahia, Brazil},
abstract={Context: The concept of technical debt (TD) contextualizes problems faced during software evolution considering the tasks that are not carried out adequately during its development. Currently, it is common to associate any impediment related to the software product and its development process to the definition of TD. This can bring confusion and ambiguity in the use of the term. Besides, due to the increasing amount of work in the area, it is difficult to have a comprehensive view of the plethora of proposals on TD management. Objective: This paper intends to investigate the current state of research on TD by identifying what research topics have been considered, organizing research directions and practical knowledge that has already been defined, identifying the known types of TD, and organizing what activities, strategies and tools have been proposed to support the management of TD. Method: A tertiary study was performed based on a set of five research questions. In total, 13 secondary studies, dated from 2012 to March 2018, were evaluated. Results: The results of this tertiary study are beneficial for both practitioners and researchers. We evolved a taxonomy of TD types, identified a list of situations in which debt items can be found in software projects, and organized a map representing the state of the art of activities, strategies and tools to support TD management. Besides, we also summarized some research directions and practical knowledge, and identified the research topics that have been more considered in secondary studies. Conclusion: This tertiary study revisited the TD landscape. Its results can help to identify points that still require further investigation in TD research. © 2018 Elsevier B.V.},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Singh2018,
author={Singh, P. and Galster, M. and Singh, K.},
title={How do secondary studies in software engineering report automated searches? a preliminary analysis},
journal={ACM International Conference Proceeding Series},
year={2018},
volume={Part F137700},
doi={10.1145/3210459.3210474},
art_number={3210474},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053667506&doi=10.1145%2f3210459.3210474&partnerID=40&md5=0016c96c453bf0947e0f17c9ea093020},
affiliation={NIT, Jalandhar Punjab, India; University of Canterbury, Christchurch, New Zealand},
abstract={Context: Systematic literature reviews and mapping studies usually rely on automated searches of digital libraries to identify primary studies. Defining proper search strings, executing semantically similar searches on different libraries, and reporting limitations of searches increase the reliability of secondary studies. Objective: We aim to survey the current state of using automated searches in secondary software engineering studies. In particular, we aim at analyzing how automated searches are reported and at understanding the reproducibility of secondary studies. Method: We perform a preliminary tertiary study that covers 50 recently published representative secondary studies from different software engineering venues and subfields. Results: We found that most secondary studies complement an automated search with a manual search and use four or more digital libraries. Also, we found that the quality of reporting search strings is rather poor. Finally, we found that most secondary studies do not acknowledge limitations of automated searches and implications of limitations on study findings. Conclusions: Our findings highlight implications for researchers (e.g., to properly report the search process) and for reviewers (e.g., to execute search strings reported in papers). Also, our findings indicate that secondary studies are difficult to replicate. © 2018 Association for Computing Machinery.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Budgen201862,
author={Budgen, D. and Brereton, P. and Drummond, S. and Williams, N.},
title={Reporting systematic reviews: Some lessons from a tertiary study},
journal={Information and Software Technology},
year={2018},
volume={95},
pages={62-74},
doi={10.1016/j.infsof.2017.10.017},
note={cited By 27},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032943825&doi=10.1016%2fj.infsof.2017.10.017&partnerID=40&md5=a285df4dd00261fb206ddccb223d6fff},
affiliation={Durham University, School of Engineering & Computing Sciences, Durham, DH1 3LE, United Kingdom; Keele University, School of Computing & Maths, Staffordshire ST5 5BG, United Kingdom; Cranfield University, Centre for Electronic Warfare, Information and Cyber, Defence Academy of the United Kingdom, Shrivenham SN6 8LA, United Kingdom},
abstract={Context: Many of the systematic reviews published in software engineering are related to research or methodological issues and hence are unlikely to be of direct benefit to practitioners or teachers. Those that are relevant to practice and teaching need to be presented in a form that makes their findings usable with minimum interpretation. Objective: We have examined a sample of the many systematic reviews that have been published over a period of six years, in order to assess how well these are reported and identify useful lessons about how this might be done. Method: We undertook a tertiary study, performing a systematic review of systematic reviews. Our study found 178 systematic reviews published in a set of major software engineering journals over the period 2010–2015. Of these, 37 provided recommendations or conclusions of relevance to education and/or practice and we used the DARE criteria as well as other attributes related to the systematic review process to analyse how well they were reported. Results: We have derived a set of 12 ‘lessons’ that could help authors with reporting the outcomes of a systematic review in software engineering. We also provide an associated checklist for use by journal and conference referees. Conclusion: There are several areas where better reporting is needed, including quality assessment, synthesis, and the procedures followed by the reviewers. Researchers, practitioners, teachers and journal referees would all benefit from better reporting of systematic reviews, both for clarity and also for establishing the provenance of any findings. © 2017 Elsevier B.V.},
document_type={Review},
source={Scopus},
}

@ARTICLE{Budgen2018234,
author={Budgen, D. and Brereton, P. and Williams, N. and Drummond, S.},
title={The contribution that empirical studies performed in industry make to the findings of systematic reviews: A tertiary study},
journal={Information and Software Technology},
year={2018},
volume={94},
pages={234-244},
doi={10.1016/j.infsof.2017.10.012},
note={cited By 6},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032219860&doi=10.1016%2fj.infsof.2017.10.012&partnerID=40&md5=b4290faf841a2702315f57eae963ea3f},
affiliation={Durham University, Department of Computer Science, Durham, DH1 3LE, United Kingdom; School of Computing & Maths, Keele University, Staffordshire ST5 5BG, United Kingdom; Cranfield University, Centre for Electronic Warfare, Information & Cyber, Defence Academy of the United Kingdom, Shrivenham SN6 8LA, United Kingdom},
abstract={Context Systematic reviews can provide useful knowledge for software engineering practice, by aggregating and synthesising empirical studies related to a specific topic. Objective We sought to assess how far the findings of systematic reviews addressing practice-oriented topics have been derived from empirical studies that were performed in industry or that used industry data. Method We drew upon and augmented the data obtained from a tertiary study that performed a systematic review of systematic reviews published in the period up to the end of 2015, seeking to identify those with findings that are relevant for teaching and practice. For the supplementary analysis reported here, we then examined the profiles of the primary studies as reported in each systematic review. Results We identified 48 systematic reviews as candidates for further analysis. The many differences that arise between systematic reviews, together with the incompleteness of reporting for these, mean that our counts should be treated as indicative rather than definitive. However, even when allowing for problems of classification, the findings from the majority of these systematic reviews were predominantly derived from using primary studies conducted in industry. There was also an emphasis upon the use of case studies, and a number of the systematic reviews also made some use of weaker ‘experience’ or even ‘opinion’ papers. Conclusions Primary studies from industry play an important role as inputs to systematic reviews. Using more rigorous industry-based primary studies can give greater authority to the findings of the systematic reviews, and should help with the creation of a corpus of sound empirical data to support evidence-informed decisions. © 2017 Elsevier B.V.},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Villalobos-Arias201815,
author={Villalobos-Arias, L. and Quesada-López, C. and Martinez, A. and Jenkins, M.},
title={A tertiary study on model-based testing areas, tools and challenges: Preliminary results},
journal={Avances en Ingenieria de Software a Nivel Iberoamericano, CIbSE 2018},
year={2018},
pages={15-28},
note={cited By 5},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054092845&partnerID=40&md5=50b054dbaca5083a12bbf73de73e713c},
affiliation={University of Costa Rica, San Pedro, Costa Rica},
abstract={Context: Model-based testing (MBT) is one of the most studied approaches by secondary studies in the area of software testing. A tertiary study that aggregates knowledge from secondary studies on MBT can be useful to both academia and industry. Objective: The goal of this study is to identify and characterize secondary studies in model-based testing, in terms of the areas, tools and challenges they have investigated. Method: We conducted a tertiary study in MBT. Our systematic mapping of secondary studies included 12 literature surveys and 10 systematic reviews over the period 1996–2016.Results: We found that the two most studied areas of MBT are UML models and Transition-based notations. We also found that only 5 studies compared and classified MBT tools. The main challenges and limitations found were related to the need for more empirical evidence that supports the selection of MBT approaches and tools. Conclusions: Not many systematic reviews on MBT were found, consequently some areas still lack secondary studies: Test execution aspects, language types, model dynamics, and some model paradigms and generation methods. We thus encourage the MBT community to perform further systematic reviews and mapping studies, following known protocols and reporting procedures, in order to increase the quality and quantity of empirical studies in MBT. © 2018 Conferencia Iberoamericana de Software Engineering - CIbSE. All Rights Reserved.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Marimuthu2017143,
author={Marimuthu, C. and Chandrasekaran, K.},
title={Systematic studies in software product lines: A tertiary study},
journal={ACM International Conference Proceeding Series},
year={2017},
volume={1},
pages={143-152},
doi={10.1145/3106195.3106212},
note={cited By 13},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032300414&doi=10.1145%2f3106195.3106212&partnerID=40&md5=cec5d2198c13ba036783a50355bf21b9},
affiliation={Department of Computer Science and Engineering, National Institute of Technology Karnataka, Karnataka, Mangalore, 575025, India},
abstract={Software product lines are widely used in the software industries to increase the re-usability and to decrease maintenance cost. On the other hand, systematic reviews are widely used in the software engineering research community to provide the overview of the research field and practitioners guidelines. Researchers have conducted many systematic studies on the different aspects of SPLs. To the best of our knowledge, till now there is no tertiary study conducted on systematic studies of SPL related research topics. In this paper, we aim at conducting a systematic mapping study of existing systematic studies to report the overview of the findings for researchers and practitioners. We performed snowballing and automated search to find out the relevant systematic studies. As a result, we analyzed 60 relevant studies to answer 5 research questions. The main focus of this tertiary study is to highlight the research topics, type of published reviews, active researchers and publication forums. Additionally, we highlight some of the limitations of the systematic studies. The important finding of this study is that the research field is well matured as the systematic studies covered a wide range of research topics. Another important finding is that many studies provided information for practitioners as well as researchers which is a notable improvement in the systematic reviews. However, many studies failed to assess the quality of the primary studies which is the major limitation of the existing systematic studies. © 2017 ACM.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Csernoch2017,
author={Csernoch, M. and Biro, P.},
title={First year students' attitude to computer problem solving},
journal={8th IEEE International Conference on Cognitive Infocommunications, CogInfoCom 2017 - Proceedings},
year={2017},
volume={2018-January},
doi={10.1109/CogInfoCom.2017.8268247},
art_number={000225},
note={cited By 5},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047130868&doi=10.1109%2fCogInfoCom.2017.8268247&partnerID=40&md5=ca31719c77d94f7cf9c981f032350631},
affiliation={University of Debrecen, Faculty of Informatics, Department of Library and Information Sciences, Debrecen, Hungary},
abstract={We have administered the extended attitude test of the Testing Algorithmic and Application Skills project (TAaAS) to reveal the computer problem solving approaches of first year students of informatics, their expectations considering tertiary studies, and their relationship with computer sciences/ informatics. The results clearly indicate that the students selected this major on their own, based on their previous experiences in informatics, but that these experiences caused misconceptions rather than creating a true picture of the nature of computer sciences. Based on the analysis of the students' answers, we concluded that they are in great need of institutional support, especially at the beginning of their tertiary studies, to introduce them to computer sciences/informatics. Beyond this, we have revealed another misconception that Software Engineering students tend to focus on the coding aspect of informatics, and especially those who have taken the advanced level school leaving exam are over-confident as regards their programming skills. © 2017 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Hoda201760,
author={Hoda, R. and Salleh, N. and Grundy, J. and Tee, H.M.},
title={Systematic literature reviews in agile software development: A tertiary study},
journal={Information and Software Technology},
year={2017},
volume={85},
pages={60-70},
doi={10.1016/j.infsof.2017.01.007},
note={cited By 65},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85009961943&doi=10.1016%2fj.infsof.2017.01.007&partnerID=40&md5=6a85ea7243f2d03424972d48f898f921},
affiliation={SEPTA Research, Electrical and Computer Engineering, The University of Auckland, Building 903, 368 Khyber Pass, New Market, Auckland, 1023, New Zealand; Department of Computer Science, International Islamic University Malaysia, Kuala Lumpur, Malaysia; School of Information Technology, Deakin University, Melbourne, Australia},
abstract={Context A number of systematic literature reviews and mapping studies (SLRs) covering numerous primary research studies on various aspects of agile software development (ASD) exist. Objective The aim of this paper is to provide an overview of the SLRs on ASD research topics for software engineering researchers and practitioners. Method We followed the tertiary study guidelines by Kitchenham et al. to find SLRs published between late 1990s to December 2015. Results We found 28 SLRs focusing on ten different ASD research areas: adoption, methods, practices, human and social aspects, CMMI, usability, global software engineering (GSE), organizational agility, embedded systems, and software product line engineering. The number of SLRs on ASD topics, similar to those on software engineering (SE) topics in general, is on the rise. A majority of the SLRs applied standardized guidelines and the quality of these SLRs on ASD topics was found to be slightly higher for journal publications than for conferences. While some individuals and institutions seem to lead this area, the spread of authors and institutions is wide. With respect to prior review recommendations, significant progress was noticed in the area of connecting agile to established domains such as usability, CMMI, and GSE; and considerable progress was observed in focusing on management-oriented approaches as Scrum and sustaining ASD in different contexts such as embedded systems. Conclusion SLRs of ASD studies are on the rise and cover a variety of ASD aspects, ranging from early adoption issues to newer applications of ASD such as in product line engineering. ASD research can benefit from further primary and secondary studies on evaluating benefits and challenges of ASD methods, agile hybrids in large-scale setups, sustainability, motivation, teamwork, and project management; as well as a fresh review of empirical studies in ASD to cover the period post 2008. © 2017 Elsevier B.V.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Napoleão201785,
author={Napoleão, B.M. and Felizardo, K.R. and De Souza, É.F. and Vijaykumar, N.L.},
title={Practical similarities and differences between Systematic Literature Reviews and Systematic Mappings: A tertiary study},
journal={Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE},
year={2017},
pages={85-90},
doi={10.18293/SEKE2017-069},
note={cited By 10},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85029517219&doi=10.18293%2fSEKE2017-069&partnerID=40&md5=978da6a8d0a2ecd8a5dde62b6959ddd3},
affiliation={Depart. of Computer, Federal Tech. Univ. of Paraná, Cornélio Procópio, PR, Brazil; Lab. of Comp. and Applied Math., Nat. Inst. for Space Research, São José dos Campos, SP, Brazil},
abstract={Background: Several researchers have reported their experiences in applying secondary studies in Software Engineering (SE), however, there is a lack of studies discussing the distinction between Systematic Mappings (SMs) and Systematic Literature Reviews (SLRs). Aims: The objective of this paper is to present the results of a tertiary study conducted to collect and evaluate evidence to better understand similarities and differences between SLRs and SMs related to four aspects: Research question, search string, search strategy and quality assessment. Method: We identified 170 secondary studies that were reviewed to answer a set of Research Questions (RQ) related to the practical conduction of secondary studies in SE. Results: Results show that both SLRs and SMs have generic RQs, broad search strings, and adopt automatic search as search strategy. However, quality assessment has been more widely adopted in SLRs. Conclusions: In practice, only the quality assessment is conducted differently in SLRs and SMs.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Garousi2016195,
author={Garousi, V. and Mäntylä, M.V.},
title={A systematic literature review of literature reviews in software testing},
journal={Information and Software Technology},
year={2016},
volume={80},
pages={195-216},
doi={10.1016/j.infsof.2016.09.002},
note={cited By 60},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84987968030&doi=10.1016%2fj.infsof.2016.09.002&partnerID=40&md5=68a976d5205a329850541dd8bfebac5f},
affiliation={Software Engineering Research Group, Department of Computer Engineering, Hacettepe University, Ankara, Turkey; Maral Software Engineering Consulting Corporation, Calgary, Canada; M3S, Faculty of Information Technology and Electrical Engineering, University of Oulu, Oulu, Finland},
abstract={Context Any newcomer or industrial practitioner is likely to experience difficulties in digesting large volumes of knowledge in software testing. In an ideal world, all knowledge used in industry, education and research should be based on high-quality evidence. Since no decision should be made based on a single study, secondary studies become essential in presenting the evidence. According to our search, over 101 secondary studies have been published in the area of software testing since 1994. With this high number of secondary studies, it is important to conduct a review in this area to provide an overview of the research landscape in this area. Objective The goal of this study is to systematically map (classify) the secondary studies in software testing. We propose that tertiary studies can serve as summarizing indexes which facilitate finding the most relevant information from secondary studies and thus supporting evidence-based decision making in any given area of software engineering. Our research questions (RQs) investigate: (1) Software-testing-specific areas, (2) Types of RQs investigated, (3) Numbers and Trends, and (4) Citations of the secondary studies. Method To conduct the tertiary study, we use the systematic-mapping approach. Additionally, we contrast the testing topics to the number of Google hits to address a general popularity of a testing topic and study the most popular papers in terms of citations. We furthermore demonstrate the practicality and usefulness of our results by mapping them to ISTQB foundation syllabus and to SWEBOK to provide implications for practitioners, testing educators, and researchers. Results After a systematic search and voting process, our study pool included 101 secondary studies in the area of software testing between 1994 and 2015. Among our results are the following: (1) In terms of number of secondary studies, model-based approach is the most popular testing method, web services are the most popular system under test (SUT), while regression testing is the most popular testing phase; (2) The quality of secondary studies, as measured by a criteria set established in the community, is slowly increasing as the years go by; and (3) Analysis of research questions, raised and studied in the pool of secondary studies, showed that there is a lack of ‘causality’ and ‘relationship’ type of research questions, a situation which needs to be improved if we, as a community, want to advance as a scientific field. (4) Among secondary studies, we found that regular surveys receive significantly more citations than SMs (p = 0.009) and SLRs (p = 0.014). Conclusion Despite the large number of secondary studies, we found that many important areas of software testing currently lack secondary studies, e.g., test management, role of product risk in testing, human factors in software testing, beta-testing (A/B-testing), exploratory testing, testability, test stopping criteria, and test-environment development. Having secondary studies in those areas is important for satisfying industrial and educational needs in software testing. On the other hand, education material of ISTQB foundation syllabus and SWEBOK could benefit from the inclusion of the latest research topics, namely search-based testing, use of cloud-computing for testing and symbolic execution. © 2016 Elsevier B.V.},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Cartaxo2016,
author={Cartaxo, B. and Pinto, G. and Vieira, E. and Soares, S.},
title={Evidence Briefings: Towards a Medium to Transfer Knowledge from Systematic Reviews to Practitioners},
journal={International Symposium on Empirical Software Engineering and Measurement},
year={2016},
volume={08-09-September-2016},
doi={10.1145/2961111.2962603},
art_number={a57},
note={cited By 15},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991721103&doi=10.1145%2f2961111.2962603&partnerID=40&md5=419926f3f668de74e538c4bee012e3bb},
affiliation={Federal University of Pernambuco, Pernambuco, Brazil; Federal Institute of Pernambuco, Pernambuco, Brazil; Federal Institute of Par, Par, Brazil},
abstract={Context: Integrate research evidence with practice is one of the main goals of evidence-based software engineering. However, recent studies show that the connection between systematic reviews and practitioners has not fully established. Goal: This paper presents the first steps towards a medium to transfer knowledge acquired from systematic reviews to practitioners. Method: We selected a set of systematic reviews identified by a tertiary study and extracted their findings to generate one-page Evidence Briefings to serve as mediums. A design specialist defined the briefings structure based on information design and gestalt principles. To evaluate the format and content of the briefings we conducted personal opinion surveys based on two groups: StackExchange users that posted questions in topics related to the reviews, and the authors of the selected reviews themselves. The former had a response rate of 21.9% (32 out 146) and the latter 31.8% (7 out of 22). Results: Practitioners rarely use systematic review research papers as mediums to acquire knowledge, since just 9% have told to do so. Both researchers and practitioners positively evaluated the evidence briefings, since 71% and 82% of the StackExchange users and systematic review authors, respectively, agreed or strongly agreed that the briefings' interface is clear. Conclusions: Researchers and practitioners were positive about the content and format of the evidence briefings we proposed. It is also possible to say that there is a gap between practitioners and systematic reviews due to the low percentage of practitioners that consume systematic reviews. The good reception of the evidence briefings from both sides show a possible route to reduce that gap. © 2016 ACM.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Nurdiani2016162,
author={Nurdiani, I. and Börstler, J. and Fricker, S.A.},
title={The impacts of agile and lean practices on project constraints: A tertiary study},
journal={Journal of Systems and Software},
year={2016},
volume={119},
pages={162-183},
doi={10.1016/j.jss.2016.06.043},
note={cited By 21},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84977123198&doi=10.1016%2fj.jss.2016.06.043&partnerID=40&md5=36dae6cd08c43c3d6c306b3955be2cab},
affiliation={Blekinge Tekniska Högskola, Department of Software Engineering, SE-37179, Karlskrona, Sweden; Fachhochschule Nordwestschweiz, i4Ds Centre for Requirements Engineering, CH-5210 Windisch, Switzerland},
abstract={The growing interest in Agile and Lean software development is reflected in the increasing number of secondary studies on the benefits and limitations of Agile and Lean processes and practices. The aim of this tertiary study is to consolidate empirical evidence regarding Agile and Lean practices and their respective impacts on project constraints as defined in the Project Management Body of Knowledge (PMBOK): scope, quality, schedule, budget, resources, communication, and risk. In this tertiary study, 13 secondary studies were included for detailed analysis. Given the heterogeneity of the data, we were unable to perform a rigorous synthesis. Instead, we mapped the identified Agile and Lean practices, and their impacts on the project constraints described in PMBOK. From 13 secondary studies, we identified 13 Agile and Lean practices. Test-Driven Development (TDD) is studied in ten secondary studies, meanwhile other practices are studied in only one or two secondary studies. This tertiary study provides a consolidated view of the impacts of Agile and Lean practices. The result of this tertiary study indicates that TDD has a positive impact on external quality. However, due to insufficient data or contradictory results, we were unable to make inferences on other Agile and Lean practices. Implications for research and practice are further discussed in the paper. © 2016 Elsevier Inc.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Zhou2016153,
author={Zhou, X. and Jin, Y. and Zhang, H. and Li, S. and Huang, X.},
title={A map of threats to validity of systematic literature reviews in software engineering},
journal={Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
year={2016},
volume={0},
pages={153-160},
doi={10.1109/APSEC.2016.031},
art_number={7890583},
note={cited By 48},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018476980&doi=10.1109%2fAPSEC.2016.031&partnerID=40&md5=7c242113f6d6cda6598b76dcb77443d7},
affiliation={Software Institute, Nanjing University, Nanjing, Jiangsu, China; College of Information Technology, Nanjing University of Chinese Medicine, Nanjing, Jiangsu, China},
abstract={Context: The assessment of Threats to Validity (TTVs) is critical to secure the quality of empirical studies in Software Engineering (SE). In the recent decade, Systematic Literature Review (SLR) was becoming an increasingly important empirical research method in SE. One of the mechanisms of insuring the level of scientific value in the findings of an SLR is to rigorously assess its validity. Hence, it is necessary to realize the status quo and issues of TTVs of SLRs in SE. Objective: This study aims to investigate thestate-of-the-practice of TTVs of the SLRs published in SE, and further support SE researchers to improve the assessment and strategies against TTVs in order to increase the quality of SLRs in SE. Method: We conducted a tertiary study by reviewing the SLRs in SE that report the assessment of TTVs. Results: We identified 316 SLRs published from 2004 to the first half of 2015, in which TTVs are discussed. The issues associated to TTVs were also summarized and categorized. Conclusion: The common TTVs related to SLR research, such as internal validity and reliability, were thoroughly discussed in most SLRs. The threats to construct validity and external validity drew less attention. Moreover, there are few strategies and tactics being reported to cope with the various TTVs. © 2016 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Cartaxo2016,
author={Cartaxo, B.},
title={Integrating evidence from systematic reviews with software engineering practice through evidence briefings},
journal={ACM International Conference Proceeding Series},
year={2016},
volume={01-03-June-2016},
doi={10.1145/2915970.2915973},
art_number={a6},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978539163&doi=10.1145%2f2915970.2915973&partnerID=40&md5=abf4c6be62e0090890b5d654ea0bf699},
affiliation={Center of Informatics-CIn, Federal University of Pernambuco-UFPE, Recife, Pernambuco, Brazil},
abstract={This paper proposes the questions and method to conduct a research intending to promote the first steps towards a better integration between evidence from systematic reviews and software engineering practice. First, we are planning to conduct a tertiary study to identify systematic reviews in software engineering. Second, we intend to investigate how those reviews relate to practitioners' issues reported in a leading software engineering Question & Answer platform. Third, we plan to generate and evaluate Evidence Briefings from those reviews in order to establish a medium to transfer knowledge acquired from systematic reviews to practice. This paper also presents some preliminary results from pilot studies we have been conducting. © 2016 ACM.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Budgen20163,
author={Budgen, D.},
title={What do we know and how well do we know it? Current knowledge about software engineering practices},
journal={Communications in Computer and Information Science},
year={2016},
volume={586},
pages={3-16},
doi={10.1007/978-3-319-30142-6_1},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84960395849&doi=10.1007%2f978-3-319-30142-6_1&partnerID=40&md5=f10cf0cc8488b016c0b3ec706a4c53fc},
affiliation={School of Engineering and Computing Sciences, Durham University, Durham, United Kingdom},
abstract={Context: The ‘prescriptions’ used in software engineering for developing and maintaining systems make use of a set of ‘practice models’, which have largely been derived by codifying successful experiences of expert practitioners. Aim: To review the ways in which empirical practices, and evidence-based studies in particular, have begun to provide more systematic sources of evidence about what practices work, when, and why. Method: This review examines the current situation regarding empirical studies in software engineering and examine some of the ways in which evidence-based studies can inform and influence practice. Results: A mix of secondary and tertiary studies have been used to illustrate the issues. Conclusion: The corpus of evidence-based knowledge for software engineering is still developing. However, outcomes so far are encouraging, and indicate that in the future we can expect evidence-based research to play a larger role in informing practice, standards and teaching. © Springer International Publishing Switzerland 2016.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Zhou2015,
author={Zhou, Y. and Zhang, H. and Huang, X. and Yang, S. and Babar, M.A. and Tang, H.},
title={Quality assessment of systematic reviews in software engineering: A tertiary study},
journal={ACM International Conference Proceeding Series},
year={2015},
volume={27-29-April-2015},
doi={10.1145/2745802.2745815},
art_number={a14},
note={cited By 21},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961170647&doi=10.1145%2f2745802.2745815&partnerID=40&md5=719befaf6fb40802406a96a84c4b4347},
affiliation={Software Institute, Nanjing University, Nanjing, Jiangsu, China; School of Computer Science, University Adelaide, Australia},
abstract={Context: The quality of an Systematic Literature Review (SLR) is as good as the quality of the reviewed papers. Hence, it is vital to rigorously assess the papers included in an SLR. There has been no tertiary study aimed at re- porting the state of the practice of quality assessment used in SLRs in Software Engineering (SE). Objective: We aimed to study the practices of quality as- sessment of the papers included in SLRs in SE. Method: We conducted a tertiary study of the SLRs that have performed quality assessment of the reviewed papers. Results: We identified and analyzed different aspects of the quality assessment of the papers included in 127 SLRs. Conclusion: Researchers use a variety of strategies for quality assessment of the papers reviewed, but report lit- tle about the justification for the used criteria. The focus is creditability but not relevance aspect of the papers. Appro- priate guidelines are required for devising quality assessment strategies. Copyright 2015 ACM.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Budgen2015IS9,
author={Budgen, D.},
title={What do we know and how well do we know it? Current knowledge about software engineering practices},
journal={ICSOFT-EA 2015 - 10th International Conference on Software Engineering and Applications, Proceedings; Part of 10th International Joint Conference on Software Technologies, ICSOFT 2015},
year={2015},
pages={IS9-IS13},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84965064114&partnerID=40&md5=2fc906ede355dfc9339bb41b4cecdea9},
affiliation={School of Engineering and Computing Sciences, Durham University, United Kingdom},
abstract={Context: The 'prescriptions' used in software engineering for developing and maintaining systems make use of a set of 'practice models', which have largely been derived by codifying successful experiences of expert practitioners. Aim: To review the ways in which empirical practices, and evidence-based studies in particular, have begun to provide more systematic sources of evidence about what practices work, when, and why. Method: My presentation will review the current situation regarding empirical studies in software engineering and examine some of the ways in which evidence-based studies can inform and influence practice. Results: These will be taken from a mix of secondary and tertiary studies. Conclusion: When compared with other disciplines that have become more 'evidence-informed', the knowledge base for software engineering still needs considerable refinement. However, outcomes so far are encouraging, and indicate that in the future we can expect evidence-based research to play a larger role in informing practice, standards and teaching.},
document_type={Conference Paper},
source={Scopus},
}
